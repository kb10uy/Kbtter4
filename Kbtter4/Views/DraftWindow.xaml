<Window x:Class="Kbtter4.Views.DraftWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:Kbtter4.Views"
        xmlns:vm="clr-namespace:Kbtter4.ViewModels"
        Title="下書き" Height="350" Width="600">


    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <Window.Resources>
        <ResourceDictionary Source="Resources.xaml"/>
    </Window.Resources>
    
    <Window.InputBindings>
        <KeyBinding Command="{Binding SendDraftCommand}" Gesture="Alt+Up"/>
        <KeyBinding Command="{Binding SendAndDeleteDraftCommand}" Gesture="Alt+Ctrl+Up"/>
        <KeyBinding Command="{Binding ReceiveDraftCommand}" Gesture="Alt+Down"/>
        <KeyBinding Command="{Binding DeleteDraftCommand}" Gesture="Delete"/>
    </Window.InputBindings>
    
    <Grid Background="{StaticResource TwitterColorWhite}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="180"/>
        </Grid.ColumnDefinitions>
        <ListView Margin="4" ScrollViewer.VerticalScrollBarVisibility="Visible" ScrollViewer.HorizontalScrollBarVisibility="Visible"
                  ItemsSource="{Binding Drafts}" SelectedItem="{Binding SelectedDraft}">
            <ListView.View>
                <GridView>
                    <GridViewColumn Header="日時" Width="150" DisplayMemberBinding="{Binding CreatedDate}"/>
                    <GridViewColumn Header="内容" Width="320" DisplayMemberBinding="{Binding Text}"/>
                    <GridViewColumn Header="返信先ユーザーSN" Width="120" DisplayMemberBinding="{Binding InReplyToUserScreenName}"/>
                    <GridViewColumn Header="返信先ID" Width="100" DisplayMemberBinding="{Binding InReplyToStatusId}"/>
                    <GridViewColumn Header="返信先ツイート" Width="200" DisplayMemberBinding="{Binding InReplyToStatusText}"/>
                </GridView>
            </ListView.View>
        </ListView>
        <StackPanel Grid.Column="1">
            <GroupBox Header="操作">
                <StackPanel>
                    <Button Margin="4" Command="{Binding SendDraftCommand}" ToolTip="選択中の下書きをメイン画面へ転送します。">メイン画面へ転送</Button>
                    <Button Margin="4" Command="{Binding SendAndDeleteDraftCommand}" ToolTip="選択中の下書きをメイン画面へ転送した後、削除します">メイン画面へ転送して削除</Button>
                    <Button Margin="4" Command="{Binding ReceiveDraftCommand}" ToolTip="メイン画面からデータを受け取ります。">メイン画面から受取</Button>
                    <Button Margin="4" Command="{Binding DeleteDraftCommand}" ToolTip="選択中の下書きを削除します。">削除</Button>
                </StackPanel>
            </GroupBox>
        </StackPanel>
    </Grid>
</Window>
