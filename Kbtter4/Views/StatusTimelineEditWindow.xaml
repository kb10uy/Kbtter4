<Window x:Class="Kbtter4.Views.StatusTimelineEditWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:Kbtter4.Views"
        xmlns:vm="clr-namespace:Kbtter4.ViewModels"
        Title="ユーザー定義タイムライン編集" Height="220" Width="512" ResizeMode="NoResize">

    <Window.Resources>
        <ResourceDictionary Source="Resources.xaml"/>
    </Window.Resources>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <Grid Background="{StaticResource TwitterColorWhite}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*"/>
            <ColumnDefinition Width="5*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="16"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <TextBlock FontSize="32" Margin="4" Grid.ColumnSpan="2">ユーザー定義タイムライン編集</TextBlock>

        <TextBlock FontSize="14" Grid.Row="2" Margin="4" TextAlignment="Center" VerticalAlignment="Center">名前</TextBlock>
        <TextBox FontSize="14" Grid.Row="2" Grid.Column="1" Margin="4" Text="{Binding Name,UpdateSourceTrigger=PropertyChanged}"/>

        <TextBlock FontSize="14" Grid.Row="3" Margin="4" TextAlignment="Center" VerticalAlignment="Center">クエリ</TextBlock>
        <TextBox FontSize="14" Grid.Row="3" Grid.Column="1" Margin="4" Text="{Binding QueryText,Delay=300,ValidatesOnDataErrors=True,UpdateSourceTrigger=PropertyChanged}"/>

        <StackPanel Orientation="Horizontal" Grid.Column="1" Grid.Row="5" HorizontalAlignment="Right">
            <Button Margin="4" Width="96" Click="Button_Click">キャンセル</Button>
            <Button Margin="4" Width="96" Click="Button_Click" Command="{Binding UpdateCommand}">OK</Button>
        </StackPanel>
    </Grid>
</Window>
