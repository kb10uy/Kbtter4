<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoreTweet</name>
    </assembly>
    <members>
        <member name="T:CoreTweet.TwitterParameterAttribute">
            <summary>
            Twitter parameter attribute.
            </summary>
        </member>
        <member name="M:CoreTweet.TwitterParameterAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.TwitterParameterAttribute"/> class.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value.</param>
        </member>
        <member name="P:CoreTweet.TwitterParameterAttribute.Name">
            <summary>
            Name of the parameter binding for.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CoreTweet.TwitterParameterAttribute.DefaultValue">
            <summary>
            Default value of the parameter.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="T:CoreTweet.TwitterParametersAttribute">
            <summary>
            Twitter parameters attribute.
            This is used for a class.
            </summary>
        </member>
        <member name="T:CoreTweet.ConnectionOptions">
            <summary>
            Properties for requesting.
            </summary>
        </member>
        <member name="M:CoreTweet.ConnectionOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.ConnectionOptions"/> class.
            </summary>
        </member>
        <member name="M:CoreTweet.ConnectionOptions.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.Timeout">
            <summary>
            Gets or sets the time-out value in milliseconds.
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.ReadWriteTimeout">
            <summary>
            Gets or sets a time-out in milliseconds when writing to or reading from a stream.
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.Proxy">
            <summary>
            Gets or sets the proxy information for the request.
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.UserAgent">
            <summary>
            Gets or sets the value of the User-agent HTTP header.
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.BeforeRequestAction">
            <summary>
            Gets or sets the action which is called before sending request.
            </summary>
        </member>
        <member name="T:CoreTweet.ParsingException">
            <summary>
            Exception when parsing.
            </summary>
        </member>
        <member name="P:CoreTweet.ParsingException.Json">
            <summary>
            The JSON which causes an exception.
            </summary>
            <value>
            The json.
            </value>
        </member>
        <member name="T:CoreTweet.TwitterException">
            <summary>
            Exception throwed by Twitter.
            </summary>
        </member>
        <member name="M:CoreTweet.TwitterException.Create(System.Net.WebException)">
            <summary>
            Create a <see cref="T:CoreTweet.TwitterException"/> instance from the <see cref="T:System.Net.WebException"/>.
            </summary>
            <param name="ex">The thrown <see cref="T:System.Net.WebException"/>.</param>
            <returns><see cref="T:CoreTweet.TwitterException"/> instance or null.</returns>
        </member>
        <member name="P:CoreTweet.TwitterException.Status">
            <summary>
                The status of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.TwitterException.Errors">
            <summary>
                The error messages.
            </summary>
        </member>
        <member name="T:CoreTweet.Core.ApiProviderBase">
            <summary>
            Provides a Twitter API wrapper. This is an abstract class.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.ApiProviderBase.Tokens">
            <summary>
            Gets or sets the OAuth tokens.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.ApiProviderBase.IncludedTokens">
            <summary>
            Gets the tokens being used in this instance.
            </summary>
        </member>
        <member name="T:CoreTweet.Core.UriConverter">
            <summary>
            Provides the <see cref="T:System.Uri"/> converter of the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.UriConverter.CanConvert(System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="objectType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CoreTweet.Core.UriConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CoreTweet.Core.UriConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:CoreTweet.Core.DateTimeOffsetConverter">
            <summary>
            Provides the <see cref="T:System.DateTimeOffset"/> converter of the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.DateTimeOffsetConverter.CanConvert(System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CoreTweet.Core.DateTimeOffsetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CoreTweet.Core.DateTimeOffsetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:CoreTweet.Core.ContributorsConverter">
            <summary>
            Provides the <see cref="T:CoreTweet.Contributors"/> converter of the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.ContributorsConverter.CanConvert(System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="objectType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CoreTweet.Core.ContributorsConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CoreTweet.Core.ContributorsConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:CoreTweet.Core.CoreBase">
            <summary>
            Represents a Twitter object. This is an <c>abstract</c> class.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.CoreBase.Convert``1(CoreTweet.Core.TokensBase,System.String,System.String)">
            <summary>
            Converts the JSON to a twitter object of the specified type.
            </summary>
            <remarks>
            <para>This method is used internally in CoreTweet.</para>
            <para>You can use this method for debugging.</para>
            </remarks>
            <param name="tokens">The OAuth tokens.</param>
            <param name="json">The json message.</param>
            <param name="jsonPath">JSONPath of object to be deserialize.</param>
            <typeparam name="T">The type of a twitter object.</typeparam>
            <returns>The twitter object.</returns>
        </member>
        <member name="M:CoreTweet.Core.CoreBase.ConvertArray``1(CoreTweet.Core.TokensBase,System.String,System.String)">
            <summary>
            <para>Converts the json to a twitter object of the specified type.</para>
            <para>This is used for APIs that return an array.</para>
            </summary>
            <remarks>
            <para>This method is used internally in CoreTweet.</para>
            <para>You can use this method for debugging.</para>
            </remarks>
            <param name="tokens">OAuth tokens.</param>
            <param name="json">The json message.</param>
            <param name="jsonPath">JSONPath of object to be deserialize.</param>
            <typeparam name="T">The type of a twitter object.</typeparam>
            <returns>Twitter objects.</returns>
        </member>
        <member name="T:CoreTweet.Core.ITwitterResponse">
            <summary>
            Represents a response that has rate limit.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.ITwitterResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.Core.ListedResponse`1">
            <summary>
            The collection of response.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.ListedResponse`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Core.ListedResponse`1"/> class with a specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see cref="T:CoreTweet.Core.ListedResponse`1"/>.</param>
        </member>
        <member name="M:CoreTweet.Core.ListedResponse`1.#ctor(System.Collections.Generic.List{`0},CoreTweet.RateLimit)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Core.ListedResponse`1"/> class with a specified collection and rate limit.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see cref="T:CoreTweet.Core.ListedResponse`1"/>.</param>
            <param name="rateLimit">The rate limit.</param>
        </member>
        <member name="M:CoreTweet.Core.ListedResponse`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:CoreTweet.Core.ListedResponse`1.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.ListedResponse`1.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:CoreTweet.Core.ListedResponse`1"/>.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.ListedResponse`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:CoreTweet.Core.TokensBase">
            <summary>
            Represents an OAuth token. This is an <c>abstract</c> class.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequestAsync(CoreTweet.MethodType,System.String,System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            Sends a request to the specified url with the specified parameters as an asynchronous operation.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns a stream.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequestAsync``1(CoreTweet.MethodType,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Sends a request to the specified url with the specified parameters as an asynchronous operation.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns a stream.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequestAsync(CoreTweet.MethodType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Sends a request to the specified url with the specified parameters as an asynchronous operation.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns a stream.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendStreamingRequestAsync(CoreTweet.MethodType,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Sends a streaming request to the specified url with the specified parameters as an asynchronous operation.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns a stream.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequestAsyncImpl(CoreTweet.MethodType,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Sends a streaming request to the specified url with the specified parameters as an asynchronous operation.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns a stream.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Core.TokensBase"/> class.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.CreateAuthorizationHeader(CoreTweet.MethodType,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            When overridden in a descendant class, creates a string for Authorization header.
            </summary>
            <param name="type">Type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <returns>A string for Authorization header.</returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequest(CoreTweet.MethodType,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            Sends a request to the specified url with the specified parameters.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <returns>A stream.</returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequest``1(CoreTweet.MethodType,System.String,``0)">
            <summary>
            Sends a request to the specified url with the specified parameters.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <returns>A stream.</returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequest(CoreTweet.MethodType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sends a request to the specified url with the specified parameters.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <returns>A stream.</returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendStreamingRequest(CoreTweet.MethodType,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Sends a streaming request to the specified url with the specified parameters.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <returns>A stream.</returns>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.ConsumerKey">
            <summary>
            Gets or sets the consumer key.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.ConsumerSecret">
            <summary>
            Gets or sets the consumer secret.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Account">
            <summary>
            Gets the wrapper of account.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Blocks">
            <summary>
            Gets the wrapper of blocks.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.DirectMessages">
            <summary>
            Gets the wrapper of direct_messages.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Favorites">
            <summary>
            Gets the wrapper of favorites.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Friends">
            <summary>
            Gets the wrapper of friends.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Followers">
            <summary>
            Gets the wrapper of followers.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Friendships">
            <summary>
            Gets the wrapper of friendships.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Geo">
            <summary>
            Gets the wrapper of geo.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Help">
            <summary>
            Gets the wrapper of help.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Lists">
            <summary>
            Gets the wrapper of lists.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Media">
            <summary>
            Gets the wrapper of media.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Mutes">
            <summary>
            Gets the wrapper of mutes.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Search">
            <summary>
            Gets the wrapper of search.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.SavedSearches">
            <summary>
            Gets the wrapper of saved_searches.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Statuses">
            <summary>
            Gets the wrapper of statuses.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Trends">
            <summary>
            Gets the wrapper of trends.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Users">
            <summary>
            Gets the wrapper of users.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Streaming">
            <summary>
            Gets the wrapper of the Streaming API.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.ConnectionOptions">
            <summary>
            Gets or sets the options of the connection.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.InternalUtils.AccessParameterReservedApi``1(CoreTweet.Core.TokensBase,CoreTweet.MethodType,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            id, slug, etc
            </summary>
        </member>
        <member name="T:CoreTweet.OAuth">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for OAuth authentication.
            </summary>
        </member>
        <member name="M:CoreTweet.OAuth.AuthorizeAsync(System.String,System.String,System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken)">
            <summary>
            <para>Generates the authorize URI as an asynchronous operation.</para>
            <para>Then call <see cref="M:CoreTweet.OAuth.GetTokensAsync(CoreTweet.OAuth.OAuthSession,System.String,System.Threading.CancellationToken)"/> after get the pin code.</para>
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="oauthCallback">
            <para>For OAuth 1.0a compliance this parameter is required.</para>
            <para>The value you specify here will be used as the URL a user is redirected to should they approve your application's access to their account.</para>
            <para>Set this to oob for out-of-band pin mode.</para>
            <para>This is also how you specify custom callbacks for use in desktop/mobile applications.</para>
            <para>Always send an oauth_callback on this step, regardless of a pre-registered callback.</para>
            </param>
            <param name="options">The connection options for the request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the authorize URI.</para>        
            </returns>
        </member>
        <member name="M:CoreTweet.OAuth.GetTokensAsync(CoreTweet.OAuth.OAuthSession,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the OAuth tokens as an asynchronous operation.</para>
            <para>Be sure to call <see cref="M:CoreTweet.OAuth.AuthorizeAsync(System.String,System.String,System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken)"/> before call this method.</para>
            </summary>
            <param name="session">The OAuth session.</param>
            <param name="pin">The pin code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the tokens.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.OAuth.Authorize(System.String,System.String,System.String,CoreTweet.ConnectionOptions)">
            <summary>
            <para>Generates the authorize URI.</para>
            <para>Then call <see cref="M:CoreTweet.OAuth.GetTokens(CoreTweet.OAuth.OAuthSession,System.String)"/> after get the pin code.</para>
            </summary>
            <param name="consumerKey">The Consumer key.</param>
            <param name="consumerSecret">The Consumer secret.</param>
            <param name="oauthCallback">
            <para>For OAuth 1.0a compliance this parameter is required.</para>
            <para>The value you specify here will be used as the URL a user is redirected to should they approve your application's access to their account.</para>
            <para>Set this to oob for out-of-band pin mode.</para>
            <para>This is also how you specify custom callbacks for use in desktop/mobile applications.</para>
            <para>Always send an oauth_callback on this step, regardless of a pre-registered callback.</para>
            </param>
            <param name="options">The connection options for the request.</param>
            <returns>The authorize URI.</returns>
        </member>
        <member name="M:CoreTweet.OAuth.GetTokens(CoreTweet.OAuth.OAuthSession,System.String)">
            <summary>
            <para>Gets the OAuth tokens.</para>
            <para>Be sure to call <see cref="M:CoreTweet.OAuth.Authorize(System.String,System.String,System.String,CoreTweet.ConnectionOptions)"/> before call this method.</para>
            </summary>
            <param name="session">The OAuth session.</param>
            <param name="pin">The pin code.</param>
            <returns>The tokens.</returns>
        </member>
        <member name="T:CoreTweet.OAuth.OAuthSession">
            <summary>
            Represents an OAuth session.
            </summary>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.ConsumerKey">
            <summary>
            Gets or sets the consumer key.
            </summary>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.ConsumerSecret">
            <summary>
            Gets or sets the consumer secret.
            </summary>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.RequestToken">
            <summary>
            Gets or sets the request token.
            </summary>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.RequestTokenSecret">
            <summary>
            Gets or sets the request token secret.
            </summary>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.ConnectionOptions">
            <summary>
            Gets or sets the options of the connection.
            </summary>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.AuthorizeUri">
            <summary>
            Gets the authorize URL.
            </summary>
        </member>
        <member name="T:CoreTweet.OAuth2">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for OAuth 2 Authentication.
            </summary>
        </member>
        <member name="M:CoreTweet.OAuth2.GetTokenAsync(System.String,System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the OAuth 2 Bearer Token as an asynchronous operation.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="options">The connection options for the request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the tokens.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.OAuth2.InvalidateTokenAsync(CoreTweet.OAuth2Token,System.Threading.CancellationToken)">
            <summary>
            Invalidates the OAuth 2 Bearer Token as an asynchronous operation.
            </summary>
            <param name="tokens">An instance of OAuth2Tokens.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the invalidated token.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.OAuth2.GetToken(System.String,System.String,CoreTweet.ConnectionOptions)">
            <summary>
            Gets the OAuth 2 Bearer Token.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="options">The connection options for the request.</param>
            <returns>The tokens.</returns>
        </member>
        <member name="M:CoreTweet.OAuth2.InvalidateToken(CoreTweet.OAuth2Token)">
            <summary>
            Invalidates the OAuth 2 Bearer Token.
            </summary>
            <param name="tokens">An instance of <see cref="T:CoreTweet.OAuth2Token"/>.</param>
            <returns>The invalidated token.</returns>
        </member>
        <member name="T:CoreTweet.Cursored`1">
            <summary>
            Represents a cursored message object.
            </summary>
        </member>
        <member name="M:CoreTweet.Cursored`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:CoreTweet.Cursored`1.Result">
            <summary>
            Gets the results.
            </summary>
        </member>
        <member name="P:CoreTweet.Cursored`1.NextCursor">
            <summary>
            Gets or sets the next cursor.
            </summary>
        </member>
        <member name="P:CoreTweet.Cursored`1.PreviousCursor">
            <summary>
            Gets or sets the previous cursor.
            </summary>
        </member>
        <member name="P:CoreTweet.Cursored`1.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.EnumerateMode">
            <summary>
            Provides a mode of enumeration.
            </summary>
        </member>
        <member name="F:CoreTweet.EnumerateMode.Next">
            <summary>
            The enumeration mode is next.
            </summary>
        </member>
        <member name="F:CoreTweet.EnumerateMode.Previous">
            <summary>
            The enumeration mode is previous.
            </summary>
        </member>
        <member name="T:CoreTweet.Embed">
            <summary>
            Represents an oEmbed representation of a Tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.Html">
            <summary>
            Gets or sets the HTML code that can be embedded.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.AuthorName">
            <summary>
            Gets or sets the name of the author.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.AuthorUrl">
            <summary>
            Gets or sets the URL of the author.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.ProviderUrl">
            <summary>
            Gets or sets the URL of the provider.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.Height">
            <summary>
            Gets or sets the height of the embed object.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.Width">
            <summary>
            Gets or sets the width of the embed object.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.CacheAge">
            <summary>
            Gets or sets the age of the cache.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.Entities">
            <summary>
            Represents the metadata and additional contextual information about content posted on Twitter.
            </summary>
        </member>
        <member name="P:CoreTweet.Entities.HashTags">
            <summary>
            Gets or sets the hashtags which have been parsed out of the Tweet text.
            </summary>
        </member>
        <member name="P:CoreTweet.Entities.Media">
            <summary>
            Gets or sets the media elements uploaded with the Tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Entities.Urls">
            <summary>
            Gets or sets the URLs included in the text of a Tweet or within textual fields of a user object.
            </summary>
        </member>
        <member name="P:CoreTweet.Entities.UserMentions">
            <summary>
            Gets or sets the other Twitter users mentioned in the text of the Tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Entities.Symbols">
            <summary>
            Gets or sets the symbols which have been parsed out of the Tweet text.
            </summary>
        </member>
        <member name="T:CoreTweet.Entity">
            <summary>
            Represents an entity object in the content posted on Twitter. This is an <c>abstract</c> class.
            </summary>
        </member>
        <member name="P:CoreTweet.Entity.Indices">
            <summary>
            <para>Gets or sets an array of integers indicating the offsets within the Tweet text where the URL begins and ends.</para>
            <para>The first integer represents the location of the first character of the URL in the Tweet text.</para>
            <para>The second integer represents the location of the first non-URL character occurring after the URL (or the end of the string if the URL is the last part of the Tweet text).</para>
            </summary>
        </member>
        <member name="T:CoreTweet.SymbolEntity">
            <summary>
            Represents a symbol object that contains a symbol in the content posted on Twitter.
            </summary>
        </member>
        <member name="P:CoreTweet.SymbolEntity.Text">
            <summary>
            Gets or sets the name of the hashtag, minus the leading '#' or '$' character.
            </summary>
        </member>
        <member name="T:CoreTweet.MediaEntity">
            <summary>
            Represents a media object that contains the URLs, sizes and type of the media.
            </summary>
        </member>
        <member name="T:CoreTweet.UrlEntity">
            <summary>
            Represents a URL object that contains the string for display and the raw URL.
            </summary>
        </member>
        <member name="P:CoreTweet.UrlEntity.DisplayUrl">
            <summary>
            Gets or sets the URL to display on clients.
            </summary>
        </member>
        <member name="P:CoreTweet.UrlEntity.ExpandedUrl">
            <summary>
            Gets or sets the expanded version of <see cref="P:CoreTweet.UrlEntity.DisplayUrl"/>.
            </summary>
        </member>
        <member name="P:CoreTweet.UrlEntity.Url">
            <summary>
            Gets or sets the wrapped URL, corresponding to the value embedded directly into the raw Tweet text, and the values for the indices parameter.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaEntity.Id">
            <summary>
            Gets or sets the ID of the media expressed as a 64-bit integer.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaEntity.MediaUrl">
            <summary>
            Gets or sets the URL pointing directly to the uploaded media file.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaEntity.MediaUrlHttps">
            <summary>
            Gets or sets the URL pointing directly to the uploaded media file, for embedding on https pages.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaEntity.Sizes">
            <summary>
            Gets or sets the object showing available sizes for the media file.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaEntity.SourceStatusId">
            <summary>
            <para>Gets or sets the ID  points to the original Tweet.</para>
            <para>(Only for Tweets containing media that was originally associated with a different tweet.)</para>
            </summary>
        </member>
        <member name="P:CoreTweet.MediaEntity.Type">
            <summary>
            Gets or sets the of uploaded media.
            </summary>
        </member>
        <member name="T:CoreTweet.MediaSize">
            <summary>
            Represents the size of the <see cref="T:CoreTweet.MediaSizes"/>.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSize.Height">
            <summary>
            Gets or sets the height in pixels of the size.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSize.Resize">
            <summary>
            <para>Gets or sets the resizing method used to obtain the size.</para>
            <para>A value of fit means that the media was resized to fit one dimension, keeping its native aspect ratio.</para>
            <para>A value of crop means that the media was cropped in order to fit a specific resolution.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSize.Width">
            <summary>
            Gets or sets the width in pixels of the size.
            </summary>
        </member>
        <member name="T:CoreTweet.MediaSizes">
            <summary>
            Represents the variations of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSizes.Large">
            <summary>
            Gets or sets the information for a large-sized version of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSizes.Medium">
            <summary>
            Gets or sets the information for a medium-sized version of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSizes.Small">
            <summary>
            Gets or sets the information for a small-sized version of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSizes.Thumb">
            <summary>
            Gets or sets the information for a thumbnail-sized version of the media.
            </summary>
        </member>
        <member name="T:CoreTweet.UserMentionEntity">
            <summary>
            Represents a mention object that contains the user information.
            </summary>
        </member>
        <member name="P:CoreTweet.UserMentionEntity.Id">
            <summary>
            Gets or sets the ID of the mentioned user.
            </summary>
        </member>
        <member name="P:CoreTweet.UserMentionEntity.Name">
            <summary>
            Gets or sets display name of the referenced user.
            </summary>
        </member>
        <member name="P:CoreTweet.UserMentionEntity.ScreenName">
            <summary>
            Gets or sets screen name of the referenced user.
            </summary>
        </member>
        <member name="T:CoreTweet.Error">
            <summary>
            Represents the error response from Twitter.
            </summary>
        </member>
        <member name="P:CoreTweet.Error.Code">
            <summary>
            <para>Gets or sets the machine-parsable code.</para>
            <para>While the text for an error message may change, the codes will stay the same.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Error.Message">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="T:CoreTweet.Configurations">
            <summary>
            Represents the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.CharactersReservedPerMedia">
            <summary>
            Gets or sets the count of the characters that is reserved for a media.
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.MaxMediaPerUpload">
            <summary>
            Gets or sets the count of the limit of the count of medias that can be uploaded at once.
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.NonUsernamePaths">
            <summary>
            <para>Gets or sets the paths in twitter.com/ that is not an username.</para>
            <para>They are used for pages of Twitter.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.PhotoSizeLimit">
            <summary>
            Gets or sets the limit of the size of media that can be uploaded.
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.ShortUrlLength">
            <summary>
            Gets or sets the length of the shorten URL.
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.ShortUrlLengthHttps">
            <summary>
            Gets or sets the length of the shorten URL that uses SSL.
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.PhotoSizes">
            <summary>
            Gets or sets the sizes of a photo.
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.Language">
            <summary>
            Represents a language code, name and status.
            </summary>
        </member>
        <member name="P:CoreTweet.Language.Code">
            <summary>
            Gets or sets the the language code.
            </summary>
        </member>
        <member name="P:CoreTweet.Language.Name">
            <summary>
            Gets or sets the name of the language.
            </summary>
        </member>
        <member name="P:CoreTweet.Language.Status">
            <summary>
            Gets or sets the status of the language.
            </summary>
        </member>
        <member name="T:CoreTweet.StringResponse">
            <summary>
            Represents the Twitter Terms of Service.
            </summary>
        </member>
        <member name="P:CoreTweet.StringResponse.Value">
            <summary>
            Gets or sets the value of response.
            </summary>
        </member>
        <member name="P:CoreTweet.StringResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.List">
            <summary>
            Represents a collections of tweets, culled from a curated list of Twitter users.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Slug">
            <summary>
            Gets or sets the string that becomes unique representation by combining an owner_id or owner_screen_name.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Name">
            <summary>
            Gets or sets the name of the List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.CreatedAt">
            <summary>
            Gets or sets the when the List was created.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Uri">
            <summary>
            <para>Gets or sets the URL of the List.</para>
            <para>Usage: string.Format("https://twitter.com{0}", uri);</para>
            </summary>
        </member>
        <member name="P:CoreTweet.List.SubscriberCount">
            <summary>
            Gets or sets the number of users following the List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.MemberCount">
            <summary>
            Gets or sets the number of members in the List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Id">
            <summary>
            Gets or sets the integer representation of the unique identifier for the List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Mode">
            <summary>
            Gets or sets a value that indicates whether the List has been published by the owner.
            </summary>
        </member>
        <member name="P:CoreTweet.List.FullName">
            <summary>
            Gets or sets the full name of the List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Description">
            <summary>
            Gets or sets the user-defined string describes the List. Nullable.
            </summary>
        </member>
        <member name="P:CoreTweet.List.User">
            <summary>
            Gets or sets the user of the owner of the List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.IsFollowing">
            <summary>
            Gets or sets a value that determines if the List has been followed by the authenticating user.
            </summary>
        </member>
        <member name="T:CoreTweet.ListResponse">
            <summary>
            Represents a collections of tweets, culled from a curated list of Twitter users with the rate limit.
            </summary>
        </member>
        <member name="P:CoreTweet.ListResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.OAuth2Token">
            <summary>
            The OAuth2 token, which is usually used for Application-only authentication.
            </summary>
        </member>
        <member name="M:CoreTweet.OAuth2Token.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.OAuth2Token"/> class.
            </summary>
        </member>
        <member name="M:CoreTweet.OAuth2Token.#ctor(CoreTweet.OAuth2Token)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.OAuth2Token"/> class with a specified token.
            </summary>
            <param name="e">The token.</param>
        </member>
        <member name="M:CoreTweet.OAuth2Token.CreateAuthorizationHeader(CoreTweet.MethodType,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Creates a string for Authorization header including bearer token.
            </summary>
            <param name="type">The type of the HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <returns>A string for Authorization header.</returns>
        </member>
        <member name="M:CoreTweet.OAuth2Token.Create(System.String,System.String,System.String)">
            <summary>
            Makes an instance of OAuth2Tokens.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="bearer">The bearer token.</param>
        </member>
        <member name="P:CoreTweet.OAuth2Token.BearerToken">
            <summary>
            Gets or sets the access token.
            </summary>
        </member>
        <member name="T:CoreTweet.Place">
            <summary>
            <para>Represents a place, which are specific, named locations with corresponding geo coordinates.</para>
            <para>They can be attached to Tweets by specifying a place_id when tweeting.</para>
            <para>Tweets associated with places are not necessarily issued from that location but could also potentially be about that location.</para>
            <para>Places can be searched for.</para>
            <para>Tweets can also be found by place_id.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Place.Attributes">
            <summary>
            <para>Gets or sets a hash of variant information about the place.</para>
            <para>See also: https://dev.twitter.com/docs/about-geo-place-attributes</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Place.BoundingBox">
            <summary>
            Gets or sets a bounding box of coordinates which encloses this place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.Country">
            <summary>
            Gets or sets the name of the country containing this place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.CountryCode">
            <summary>
            Gets or sets the shortened country code representing the country containing this place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.FullName">
            <summary>
            Gets or sets the full human-readable representation of the name of the place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.Id">
            <summary>
            <para>Gets or sets the ID representing this place.</para>
            <para>Note that this is represented as a string, not an integer.</para>
            <para>In trends/available or trends/closest, ID is a Yahoo! Where On Earth ID.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Place.Name">
            <summary>
            Gets or sets the short human-readable representation of the name of the place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.PlaceType">
            <summary>
            Gets or sets the type of location represented by this place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.Url">
            <summary>
            Gets or sets the URL representing the location of additional place metadata for this place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.ContainedWithin">
            <summary>
            Gets or sets the array of Places contained within this Place.
            </summary>
        </member>
        <member name="T:CoreTweet.PlaceResponse">
            <summary>
            <para>Represents a place with rate limit.</para>
            <para>Places are specific, named locations with corresponding geo coordinates.</para>
            <para>They can be attached to Tweets by specifying a place_id when tweeting.</para>
            <para>Tweets associated with places are not necessarily issued from that location but could also potentially be about that location.</para>
            <para>Places can be searched for.</para>
            <para>Tweets can also be found by place_id.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.PlaceResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.BoundingBox">
            <summary>
            <para>Represents a bounding box.</para>
            <para>This class can be converted to a JSON with <see cref="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)"/>.</para>
            </summary>
        </member>
        <member name="M:CoreTweet.BoundingBox.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:CoreTweet.BoundingBox.Coordinates">
            <summary>
            <para>Gets or sets a series of longitude and latitude points, defining a box which will contain the Place entity this bounding box is related to.</para>
            <para>Each point is an array in the form of [longitude, latitude].</para>
            <para>Points are grouped into an array per bounding box.</para>
            <para>Bounding box arrays are wrapped in one additional array to be compatible with the polygon notation.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.BoundingBox.Type">
            <summary>
            <para>Gets or sets the type of data encoded in the coordinates property.</para>
            <para>This will be "Polygon" for bounding boxes.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.BoundingBox.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:CoreTweet.GeoResult">
            <summary>
            Represents the places near the given coordinates which are similar in name.
            </summary>
        </member>
        <member name="M:CoreTweet.GeoResult.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:CoreTweet.GeoResult.Places">
            <summary>
            Gets or set the names of the places.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoResult.Token">
            <summary>
            Gets or sets the token needed to be able to create a new place.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoResult.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.TrendsResult">
            <summary>
            Represents a trending topics for a specific WOEID.
            </summary>
        </member>
        <member name="M:CoreTweet.TrendsResult.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:CoreTweet.TrendsResult.AsOf">
            <summary>
            Gets or sets the UTC datetime that the trends are valid as of.
            </summary>
        </member>
        <member name="P:CoreTweet.TrendsResult.CreatedAt">
            <summary>
            Gets or sets the UTC datetime that this result was created at.
            </summary>
        </member>
        <member name="P:CoreTweet.TrendsResult.Locations">
            <summary>
            Gets or sets the Locations of trending topics.
            </summary>
        </member>
        <member name="P:CoreTweet.TrendsResult.Trends">
            <summary>
            Gets or sets the queried trends.
            </summary>
        </member>
        <member name="T:CoreTweet.GeoAttributes">
            <summary>
            Represents the metadata about places. 
            </summary>
        </member>
        <member name="P:CoreTweet.GeoAttributes.StreetAddress">
            <summary>
            Gets or sets the address of street.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoAttributes.Locality">
            <summary>
            Gets or sets the city the place is in.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoAttributes.Region">
            <summary>
            Gets or sets the administrative region the place is in.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoAttributes.Iso3CountryCode">
            <summary>
            Gets or sets the country code.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoAttributes.PostalCode">
            <summary>
            Gets or sets the preferred local format for the place.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoAttributes.Phone">
            <summary>
            Gets or sets the preferred local format for the place, include long distance code.
            </summary>
        </member>
        <member name="T:CoreTweet.Location">
            <summary>
            Represents a location.
            </summary>
        </member>
        <member name="P:CoreTweet.Location.Name">
            <summary>
            Gets or sets the name of the location.
            </summary>
        </member>
        <member name="P:CoreTweet.Location.WoeId">
            <summary>
            Gets or sets the WOEID of the location.
            </summary>
        </member>
        <member name="T:CoreTweet.Trend">
            <summary>
            Represents the trend.
            </summary>
        </member>
        <member name="P:CoreTweet.Trend.Name">
            <summary>
            Gets or sets the name of this trend.
            </summary>
        </member>
        <member name="P:CoreTweet.Trend.Url">
            <summary>
            Gets or sets the URL to search this trend.
            </summary>
        </member>
        <member name="P:CoreTweet.Trend.Query">
            <summary>
            Gets or sets the query string for search.
            </summary>
        </member>
        <member name="T:CoreTweet.RateLimit">
            <summary>
            Represents the rate limits for a resource family.
            </summary>
        </member>
        <member name="P:CoreTweet.RateLimit.Remaining">
            <summary>
            Gets or sets the left of requesting the resource within the current rate limiting window.
            </summary>
        </member>
        <member name="P:CoreTweet.RateLimit.Reset">
            <summary>
            Gets or sets the reset expiration time.
            </summary>
        </member>
        <member name="P:CoreTweet.RateLimit.Limit">
            <summary>
            Gets or sets the value that represents the limit count within the current rate limiting window.
            </summary>
        </member>
        <member name="T:CoreTweet.SearchQuery">
            <summary>
            Represents a saved search query used in the Twitter Search API.
            </summary>
        </member>
        <member name="P:CoreTweet.SearchQuery.CreatedAt">
            <summary>
            Gets or sets the created time of the saved search.
            </summary>
        </member>
        <member name="P:CoreTweet.SearchQuery.Id">
            <summary>
            Gets or sets the ID of the saved search.
            </summary>
        </member>
        <member name="P:CoreTweet.SearchQuery.Name">
            <summary>
            Gets or sets the name of the saved search.
            </summary>
        </member>
        <member name="P:CoreTweet.SearchQuery.Query">
            <summary>
            Gets or sets the query of the saved search.
            </summary>
        </member>
        <member name="T:CoreTweet.SearchQueryResponse">
            <summary>
            Represents a saved search query used in the Twitter Search API with the rate limit.
            </summary>
        </member>
        <member name="P:CoreTweet.SearchQueryResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.Setting">
            <summary>
            Represents the settings including current trend, geo and sleep time information.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.AlwaysUseHttps">
            <summary>
            Gets or sets a value that determines if the connections always use https.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.IsDiscoverableByEmail">
            <summary>
            Gets or sets a value that determines if your friends can discover you by your email address.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.GeoEnabled">
            <summary>
            <para>Gets or sets a value that determines if the user has enabled the possibility of geotagging their Tweets.</para>
            <para>This field must be true for the current user to attach geographic data when using POST statuses/update.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.Language">
            <summary>
            <para>Gets or sets the BCP 47 code for the user's self-declared user interface language.</para>
            <para>May or may not have anything to do with the content of their Tweets.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.IsProtected">
            <summary>
            Gets or sets a value that determines if the user has chosen to protect their Tweets.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.ScreenName">
            <summary>
            <para>Gets or sets the screen name, handle, or alias that this user identifies themselves with.</para>
            <para>screen_names are unique but subject to change.</para>
            <para>Use id_str as a user identifier whenever possible.</para>
            <para>Typically a maximum of 15 characters long, but some historical accounts may exist with longer names.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.ShowAllInlineMedia">
            <summary>
            Gets or sets a value that determines if the user would like to see media inline. Somewhat disused.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.SleepTime">
            <summary>
            Gets or sets the sleep time.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.TimeZone">
            <summary>
            Gets or sets the time zone.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.TrendLocaion">
            <summary>
            Gets or sets the trend locaions.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.UseCookiePersonalization">
            <summary>
            Gets or sets the value that determines if the user has enabled the cookie personalization.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.SleepTime">
            <summary>
            Represents the sleep time of the user's location.
            </summary>
        </member>
        <member name="P:CoreTweet.SleepTime.IsEnabled">
            <summary>
            Gets or sets a value that determines if the sleep time is enabled.
            </summary>
        </member>
        <member name="P:CoreTweet.SleepTime.EndTime">
            <summary>
            Gets or sets the end time.
            </summary>
        </member>
        <member name="P:CoreTweet.SleepTime.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
        </member>
        <member name="T:CoreTweet.TimeZone">
            <summary>
            Gets or sets the timezone of the user.
            </summary>
        </member>
        <member name="P:CoreTweet.TimeZone.Name">
            <summary>
            Gets or sets the name of the timezone.
            </summary>
        </member>
        <member name="P:CoreTweet.TimeZone.InfoName">
            <summary>
            Gets or sets the Rails TimeZone of the user's timezone.
            </summary>
        </member>
        <member name="P:CoreTweet.TimeZone.UtcOffset">
            <summary>
            Gets or sets the UTC offset from the user's timezone.
            </summary>
        </member>
        <member name="T:CoreTweet.Status">
            <summary>
            <para>Represents the Tweets, which are the basic atomic building block of all things Twitter.</para>
            <para>Users tweet Tweets, also known more generically as "status updates."</para>
            <para>Tweets can be embedded, replied to, favorited, unfavorited and deleted.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Id">
            <summary>
            <para>Gets or sets the integer representation of the unique identifier for this Tweet.</para>
            <para>See also: https://dev.twitter.com/docs/twitter-ids-json-and-snowflake</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Contributors">
            <summary>
            <para>Gets or sets the collection of brief user objects (usually only one) indicating users who contributed to the authorship of the tweet, on behalf of the official tweet author.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Coordinates">
            <summary>
            <para>Gets or sets the value represents the geographic location of the Tweet as reported by the user or client application.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.CreatedAt">
            <summary>
            Gets or sets the time when the Tweet was created.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.CurrentUserRetweet">
            <summary>
            <para>Gets or sets the Tweet ID of the user's own retweet of this Tweet, if exists.</para>
            <para>Only surfaces on methods supporting the include_my_retweet parameter, when set to true.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Entities">
            <summary>
            Gets or sets the entities which have been parsed out of the text of the Tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.ExtendedEntities">
            <summary>
            Gets or sets the extended entities which may have multiple entities data.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.FavoriteCount">
            <summary>
            <para>Gets or sets a number of approximately how many times the Tweet has been favorited by Twitter users.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.IsFavorited">
            <summary>
            <para>Gets or sets a value that determines if the Tweet has been favorited by the authenticating user.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.InReplyToScreenName">
            <summary>
            <para>Gets or sets the screen name of the original Tweet's author if the represented Tweet is a reply.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.InReplyToStatusId">
            <summary>
            <para>Gets or sets the integer representation of the original Tweet's ID if the represented Tweet is a reply.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.InReplyToUserId">
            <summary>
            <para>Gets or sets the integer representation of the original Tweet's author ID if the represented Tweet is a reply.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Place">
            <summary>
            <para>Gets or sets the place that the tweet is associated.</para>
            <para>Nullable.</para>
            <para>See also: https://dev.twitter.com/docs/platform-objects/places</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.PossiblySensitive">
            <summary>
            <para>Gets or sets a value that determines if the URL contained in the tweet may contain content or media identified as sensitive content.</para>
            <para>This field only surfaces when a tweet contains a link and the meaning of the filed doesn't pertain to the Tweet content itself.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Scopes">
            <summary>
            <para>Gets or sets a set of key-value pairs indicatse the intended contextual delivery of the containing Tweet.</para>
            <para>Currently used by Twitter's Promoted Products.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.RetweetCount">
            <summary>
            <para>Gets or sets a number of approximately how many times the Tweet has been retweeted by Twitter users.</para>
            <para></para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.IsRetweeted">
            <summary>
            <para>Gets or sets a value that determines if the Tweet has been retweeted by the authenticating user.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.RetweetedStatus">
            <summary>
            <para>Gets or sets the original Tweet if the status is a retweet.</para>
            <para>Users can amplify the broadcast of tweets authored by other users by retweeting.</para> 
            <para>Retweets can be distinguished from typical Tweets by the existence of a retweeted_status attribute.</para>
            <para>This attribute contains a representation of the original Tweet that was retweeted.</para> 
            <para>Note that retweets of retweets do not show representations of the intermediary retweet, but only the original tweet.</para>
            <para>(Users can also unretweet a retweet they created by deleting their retweet.) </para> 
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Source">
            <summary>
            <para>Gets or sets the utility used to post the Tweet, as an HTML-formatted string.</para>
            <para>A tweet from the Twitter website has a value of "web" (case-insensitive).</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Text">
            <summary>
            <para>Gets or sets the actual text of the status update.</para>
            <para>See also: https://github.com/twitter/twitter-text-rb/blob/master/lib/twitter-text/regex.rb</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.IsTruncated">
            <summary>
            <para>Gets or sets a value that determines if the value of the text parameter was truncated, for example, as a result of a retweet exceeding the 140 character Tweet length.</para>
            <para>Truncated text will end in ellipsis, like this ...</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.User">
            <summary>
            <para>Gets or sets the user who posted the Tweet.</para>
            <para>Perspectival attributes embedded within this object are unreliable.</para>
            <para>Seealso: https://dev.twitter.com/docs/platform-objects/users</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.WithheldCopyright">
            <summary>
            <para>Gets or sets a value that determines if this piece of content has been withheld due to a DMCA complaint.</para>
            <para>See also: http://en.wikipedia.org/wiki/Digital_Millennium_Copyright_Act</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.WithheldInCountries">
            <summary>
            <para>Gets or sets a list of uppercase two-letter country codes this content is withheld from.</para>
            <para>See also: https://dev.twitter.com/blog/new-withheld-content-fields-api-responses</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.WithheldScope">
            <summary>
            <para>Gets or sets the content being withheld is the "status" or a "user."</para>
            <para>See also: https://dev.twitter.com/blog/new-withheld-content-fields-api-responses</para>
            </summary>
        </member>
        <member name="T:CoreTweet.StatusResponse">
            <summary>
            <para>Represents the Tweet with rate limit.</para>
            <para>Tweets are the basic atomic building block of all things Twitter.</para>
            <para>Users tweet Tweets, also known more generically as "status updates."</para>
            <para>Tweets can be embedded, replied to, favorited, unfavorited and deleted.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.StatusResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.Contributors">
            <summary>
            <para>Represents the contributors, a collection of brief user objects (usually only one) indicating users who contributed to the authorship of the tweet, on behalf of the official tweet author.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Contributors.Id">
            <summary>
            Gets or sets the integer representation of the ID of the user who contributed to the Tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Contributors.ScreenName">
            <summary>
            Gets or sets the screen name of the user who contributed to the Tweet.
            </summary>
        </member>
        <member name="T:CoreTweet.Coordinates">
            <summary>
            Represents the coordinates that the geographic location with longitude and latitude points.
            </summary>
        </member>
        <member name="M:CoreTweet.Coordinates.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Coordinates"/> class
            </summary>
        </member>
        <member name="M:CoreTweet.Coordinates.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Coordinates"/> class
            </summary>
            <param name="longtitude">The longtitude.</param>
            <param name="latitude">The latitude.</param>
        </member>
        <member name="P:CoreTweet.Coordinates.Longtitude">
            <summary>
            Gets or sets the longtitude of the location.
            </summary>
        </member>
        <member name="P:CoreTweet.Coordinates.Latitude">
            <summary>
            Gets or sets the latitude of the location.
            </summary>
        </member>
        <member name="P:CoreTweet.Coordinates.Type">
            <summary>
            <para>Gets or sets the type of data encoded in the coordinates property.</para>
            <para>This will be "Point" for Tweet coordinates fields.</para>
            </summary>
        </member>
        <member name="T:CoreTweet.DirectMessage">
            <summary>
            Represents a direct message.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.Id">
            <summary>
            Gets or sets the integer representation of the unique identifier for the Direct message.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.Sender">
            <summary>
            Gets or sets the sender of the Direct message.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.Recipient">
            <summary>
            Gets or sets the Recipient of the Direct message.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.CreatedAt">
            <summary>
            Gets or sets the time when the Direct message was created.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.Entities">
            <summary>
            Gets or sets the entities which have been parsed out of the text of the Direct message.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.Text">
            <summary>
            Gets or sets the actual text of the Direct message.
            </summary>
        </member>
        <member name="T:CoreTweet.DirectMessageResponse">
            <summary>
            Represents a direct message with rate limit.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessageResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.Tokens">
            <summary>
            Represents the OAuth tokens.
            </summary>
        </member>
        <member name="M:CoreTweet.Tokens.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Tokens"/> class.
            </summary>
        </member>
        <member name="M:CoreTweet.Tokens.#ctor(CoreTweet.Tokens)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Tokens"/> class with a specified token.
            </summary>
            <param name="e">The token.</param>
        </member>
        <member name="M:CoreTweet.Tokens.CreateAuthorizationHeader(CoreTweet.MethodType,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Creates a string for Authorization header for OAuth 1.0A.
            </summary>
            <param name="type">The Type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <returns>A string for Authorization header.</returns>
        </member>
        <member name="M:CoreTweet.Tokens.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:CoreTweet.Tokens"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:CoreTweet.Tokens"/>.
            </returns>
        </member>
        <member name="M:CoreTweet.Tokens.Create(System.String,System.String,System.String,System.String,System.Int64,System.String)">
            <summary>
            Makes an instance of Tokens.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="accessToken">The access token.</param>
            <param name="accessSecret">The access secret.</param>
            <param name="userID">The user's ID.</param>
            <param name="screenName">The user's screen name.</param>
            <returns>The tokens.</returns>
        </member>
        <member name="P:CoreTweet.Tokens.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
        </member>
        <member name="P:CoreTweet.Tokens.AccessTokenSecret">
            <summary>
            Gets or sets the access token secret.
            </summary> 
        </member>
        <member name="P:CoreTweet.Tokens.UserId">
            <summary>
            Gets or sets the user ID.
            </summary>
        </member>
        <member name="P:CoreTweet.Tokens.ScreenName">
            <summary>
            Gets or sets the screen name.
            </summary>
        </member>
        <member name="T:CoreTweet.MediaUploadResult">
            <summary>
            Represents the result of the uploaded media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaUploadResult.Image">
            <summary>
            Gets or sets the data of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaUploadResult.MediaId">
            <summary>
            Gets or sets the ID of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaUploadResult.Size">
            <summary>
            Gets or sets the size of the media.
            </summary>
        </member>
        <member name="T:CoreTweet.Image">
            <summary>
            Represents the detail data of the uploaded media.
            </summary>
        </member>
        <member name="P:CoreTweet.Image.Width">
            <summary>
            Gets or sets the width of the image.
            </summary>
        </member>
        <member name="P:CoreTweet.Image.Height">
            <summary>
            Gets or sets the height of the image.
            </summary>
        </member>
        <member name="P:CoreTweet.Image.ImageType">
            <summary>
            Gets or sets the type of the image.
            </summary>
        </member>
        <member name="T:CoreTweet.User">
            <summary>
            Represents a user.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsContributorsEnabled">
            <summary>
            Gets or sets a value that determines if the user has an account with "contributor mode" enabled, allowing for Tweets issued by the user to be co-authored by another account. Rarely true.
            </summary>
        </member>
        <member name="P:CoreTweet.User.CreatedAt">
            <summary>
            Gets or sets the UTC datetime that the user account was created on Twitter.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsDefaultProfile">
            <summary>
            Gets or sets a value that determines if the user has not altered the theme or background of its user profile.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsDefaultProfileImage">
            <summary>
            Gets or sets a value that determines if the user has not uploaded their own avatar and a default egg avatar is used instead.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Description">
            <summary>
            <para>Gets or sets the user-defined string describing their account.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.Entities">
            <summary>
            Gets or sets the entities which have been parsed out of the URL or description fields defined by the user.
            </summary>
        </member>
        <member name="P:CoreTweet.User.FavouritesCount">
            <summary>
            <para>Gets or sets the number of tweets this user has favorited in the account's lifetime.</para>
            <para>British spelling used in the field name for historical reasons.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsFollowRequestSent">
            <summary>
            <para>Gets or sets a value that determines if the authenticating user has issued a follow request to this protected user account.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.FollowersCount">
            <summary>
            <para>Gets or sets the number of followers this account currently has.</para>
            <para>Under certain conditions of duress, the field will temporarily indicates 0.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.FriendsCount">
            <summary>
            <para>Gets or sets the number of the account is following (AKA its followings).</para>
            <para>Under certain conditions of duress, the field will temporarily indicates 0.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsGeoEnabled">
            <summary>
            <para>Gets or sets a value that determines if the user has enabled the possibility of geotagging their Tweets.</para>
            <para>This field must be true for the current user to attach geographic data when using statuses/update.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.Id">
            <summary>
            Gets or sets the integer representation of the unique identifier for this User.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsTranslator">
            <summary>
            Gets or sets a value that determines if the user is a participant in Twitter's translator community.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Language">
            <summary>
            <para>Gets or sets the BCP 47 code for the user's self-declared user interface language.</para>
            <para>May or may not have anything to do with the content of their Tweets.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.ListedCount">
            <summary>
            Gets or sets the number of public lists that the user is a member of.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Location">
            <summary>
            <para>Gets or sets the user-defined location for this account's profile.</para>
            <para>Not necessarily a location nor parsable.</para>
            <para>This field will occasionally be fuzzily interpreted by the Search service.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.Name">
            <summary>
            <para>Gets or sets the name of the user, as they've defined it.</para>
            <para>Not necessarily a person's name.</para>
            <para>Typically capped at 20 characters, but subject to be changed.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileBackgroundColor">
            <summary>
            Gets or sets the hexadecimal color chosen by the user for their background.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileBackgroundImageUrl">
            <summary>
            Gets or sets a HTTP-based URL pointing to the background image the user has uploaded for their profile.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileBackgroundImageUrlHttps">
            <summary>
            Gets or sets a HTTPS-based URL pointing to the background image the user has uploaded for their profile.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsProfileBackgroundTile">
            <summary>
            Gets or sets a value that determines if the user's <see cref="P:CoreTweet.User.ProfileBackgroundImageUrl"/> should be tiled when displayed.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileBannerUrl">
            <summary>
            Gets or sets a HTTPS-based URL pointing to the standard web representation of the user's uploaded profile banner. By adding a final path element of the URL, you can obtain different image sizes optimized for specific displays. In the future, an API method will be provided to serve these URLs so that you need not modify the original URL. For size variations, please see User Profile Images and Banners.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileImageUrl">
            <summary>
            Gets or sets a HTTP-based URL pointing to the user's avatar image. See User Profile Images and Banners.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileImageUrlHttps">
            <summary>
            Gets or sets a HTTPS-based URL pointing to the user's avatar image.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileLinkColor">
            <summary>
            Gets or sets the hexadecimal color the user has chosen to display links with in their Twitter UI.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileSidebarBorderColor">
            <summary>
            Gets or sets the hexadecimal color the user has chosen to display sidebar borders with in their Twitter UI.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileSidebarFillColor">
            <summary>
            Gets or sets the hexadecimal color the user has chosen to display sidebar backgrounds with in their Twitter UI.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileTextColor">
            <summary>
            Gets or sets the hexadecimal color the user has chosen to display text with in their Twitter UI.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsProfileUseBackgroundImage">
            <summary>
            Gets or sets a value that determines if the user wants their uploaded background image to be used.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsProtected">
            <summary>
            Gets or sets a value that determines if the user has chosen to protect their Tweets.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ScreenName">
            <summary>
            <para>Gets or sets the screen name, handle, or alias that this user identifies themselves with.</para>
            <para><see cref="P:CoreTweet.User.ScreenName"/> are unique but subject to be changed.</para>
            <para>Use <see cref="P:CoreTweet.User.Id"/> as a user identifier whenever possible.</para>
            <para>Typically a maximum of 15 characters long, but some historical accounts may exist with longer names.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsShowAllInlineMedia">
            <summary>
            Gets or sets a value that determines if the user would like to see media inline. Somewhat disused.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Status">
            <summary>
            <para>Gets or sets the user's most recent tweet or retweet.</para>
            <para>In some circumstances, this data cannot be provided and this field will be omitted, null, or empty.</para>
            <para>Perspectival attributes within tweets embedded within users cannot always be relied upon.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.StatusesCount">
            <summary>
            Gets or sets the number of tweets (including retweets) issued by the user.
            </summary>
        </member>
        <member name="P:CoreTweet.User.TimeZone">
            <summary>
            <para>Gets or sets the string describes the time zone the user declares themselves within.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.Url">
            <summary>
            <para>Gets or sets the URL provided by the user in association with their profile.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.UtcOffset">
            <summary>
            <para>Gets or sets the offset from GMT/UTC in seconds.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsVerified">
            <summary>
            Gets or sets a value that determines if the user has a verified account.
            </summary>
        </member>
        <member name="P:CoreTweet.User.WithheldInCountries">
            <summary>
            Gets or sets a textual representation of the two-letter country codes this user is withheld from.
            </summary>
        </member>
        <member name="P:CoreTweet.User.WithheldScope">
            <summary>
            Gets or sets the content being withheld is the "status" or a "user."
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsMuting">
            <summary>
            Gets or sets a value that determines if the user is muted by authenticating user.
            </summary>
        </member>
        <member name="T:CoreTweet.UserResponse">
            <summary>
            Represents a user response with rate limit.
            </summary>
        </member>
        <member name="P:CoreTweet.UserResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.RelationShip">
            <summary>
            Represents a relationship with aother user.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationShip.Target">
            <summary>
            Gets or sets the target of the relationship.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationShip.Source">
            <summary>
            Gets or sets the source of the relationship.
            </summary>
        </member>
        <member name="T:CoreTweet.RelationShipResponse">
            <summary>
            Represents a relationship with aother user response with rate limit.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationShipResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.Friendship">
            <summary>
            Represents a frienship.
            </summary>
        </member>
        <member name="P:CoreTweet.Friendship.Id">
            <summary>
            Gets or sets the ID of the user.
            </summary>
        </member>
        <member name="P:CoreTweet.Friendship.ScreenName">
            <summary>
            Gets or sets the screen name of the user.
            </summary>
        </member>
        <member name="P:CoreTweet.Friendship.IsFollowing">
            <summary>
            Gets or sets a value that determines if you are following the user.
            </summary>
        </member>
        <member name="P:CoreTweet.Friendship.IsFollowedBy">
            <summary>
            Gets or sets a value that determines if the user is following you.
            </summary>
        </member>
        <member name="P:CoreTweet.Friendship.CanDM">
            <summary>
            Gets or sets a value that determines if you can send a direct message to the user.
            </summary>
        </member>
        <member name="P:CoreTweet.Friendship.AllReplies">
            <summary>
            Gets or sets a value that determines if you get all replies.
            </summary>
        </member>
        <member name="P:CoreTweet.Friendship.WantsRetweets">
            <summary>
            Gets or sets a value that determines if you want retweets or not.
            </summary>
        </member>
        <member name="P:CoreTweet.Friendship.IsBlocking">
            <summary>
            Gets or sets a value that determines if you are blocking the user.
            </summary>
        </member>
        <member name="P:CoreTweet.Friendship.IsMarkedSpam">
            <summary>
            Gets or sets a value that determines if you marked the user as spam.
            </summary>
        </member>
        <member name="P:CoreTweet.Friendship.IsNotificationsEnabled">
            <summary>
            Gets or sets a value that determines if the notifications of the user enabled or not.
            </summary>
        </member>
        <member name="P:CoreTweet.Friendship.Connections">
            <summary>
            Gets or sets the connections.
            </summary>
        </member>
        <member name="P:CoreTweet.Friendship.IsMuting">
            <summary>
            Gets or sets a value that determines if you are muting the user.
            </summary>
        </member>
        <member name="T:CoreTweet.Category">
            <summary>
            Represents a category.
            </summary>
        </member>
        <member name="P:CoreTweet.Category.Name">
            <summary>
            Gets or sets the name of the category.
            </summary>
        </member>
        <member name="P:CoreTweet.Category.Slug">
            <summary>
            Gets or sets the slug of the category.
            </summary>
        </member>
        <member name="P:CoreTweet.Category.Size">
            <summary>
            Gets or sets the size of the category.
            </summary>
        </member>
        <member name="P:CoreTweet.Category.Users">
            <summary>
            Gets or sets the users in this category.
            </summary>
        </member>
        <member name="T:CoreTweet.CategoryResponse">
            <summary>
            Represents a category response with rate limit.
            </summary>
        </member>
        <member name="P:CoreTweet.CategoryResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.ProfileBannerSizes">
            <summary>
            Represents the variations of a size of a profile banner.
            </summary>
        </member>
        <member name="P:CoreTweet.ProfileBannerSizes.Web">
            <summary>
            Gets or sets the size for Web.
            </summary>
        </member>
        <member name="P:CoreTweet.ProfileBannerSizes.WebRetina">
            <summary>
            Gets or sets the size for Web with high resolution devices.
            </summary>
        </member>
        <member name="P:CoreTweet.ProfileBannerSizes.IPad">
            <summary>
            Gets or sets the size for Apple iPad.
            </summary>
        </member>
        <member name="P:CoreTweet.ProfileBannerSizes.IPadRetina">
            <summary>
            Gets or sets the size for Apple iPad with high resolution.
            </summary>
        </member>
        <member name="P:CoreTweet.ProfileBannerSizes.Mobile">
            <summary>
            Gets or sets the size for mobile devices.
            </summary>
        </member>
        <member name="P:CoreTweet.ProfileBannerSizes.MobileRetina">
            <summary>
            Gets or sets the size for mobile devices with high resolution devices.
            </summary>
        </member>
        <member name="P:CoreTweet.ProfileBannerSizes.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.ProfileBannerSize">
            <summary>
            Represents a size of a profile banner.
            </summary>
        </member>
        <member name="P:CoreTweet.ProfileBannerSize.Width">
            <summary>
            Gets or sets the width in pixels of the size.
            </summary>
        </member>
        <member name="P:CoreTweet.ProfileBannerSize.Height">
            <summary>
            Gets or sets the height in pixels of the size.
            </summary>
        </member>
        <member name="P:CoreTweet.ProfileBannerSize.Url">
            <summary>
            Gets or sets the URL of the size.
            </summary>
        </member>
        <member name="T:CoreTweet.UserEntities">
            <summary>
            Represents an entity object for user.
            </summary>
        </member>
        <member name="P:CoreTweet.UserEntities.Url">
            <summary>
            Gets or sets the entities for <see cref="P:CoreTweet.User.Url"/> field.
            </summary>
        </member>
        <member name="P:CoreTweet.UserEntities.Description">
            <summary>
            Gets or sets the entities for <see cref="P:CoreTweet.User.Description"/> field.
            </summary>
        </member>
        <member name="T:CoreTweet.AsyncResponse">
            <summary>
            Represents an asynchronous response.
            </summary>
        </member>
        <member name="M:CoreTweet.AsyncResponse.#ctor(System.Net.HttpWebResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.AsyncResponse"/> class with a specified source.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:CoreTweet.AsyncResponse.GetResponseStream">
            <summary>
            Gets the stream that is used to read the body of the response from the server.
            </summary>
            <exception cref="T:System.PlatformNotSupportedException">The platform only supports asynchronous methods.</exception>
            <returns>A <see cref="T:System.IO.Stream"/> containing the body of the response.</returns>
        </member>
        <member name="M:CoreTweet.AsyncResponse.GetResponseStreamAsync">
            <summary>
            Gets the stream that is used to read the body of the response from the server as an asynchronous operation.
            </summary>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the <see cref="T:System.IO.Stream"/> containing the body of the response.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.AsyncResponse.Dispose(System.Boolean)">
            <summary>
            Closes the stream and releases all the resources.
            </summary>
        </member>
        <member name="M:CoreTweet.AsyncResponse.Dispose">
            <summary>
            Closes the stream and releases all the resources.
            </summary>
        </member>
        <member name="P:CoreTweet.AsyncResponse.Source">
            <summary>
            Gets the source of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.AsyncResponse.StatusCode">
            <summary>
            Gets the status code of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.AsyncResponse.Headers">
            <summary>
            Gets the headers of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.Request">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for sending a request to Twitter and some other web services.
            </summary>
        </member>
        <member name="M:CoreTweet.Request.HttpGetAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken)">
            <summary>
            Sends a GET request as an asynchronous operation.
            </summary>
            <param name="url">The URL.</param>
            <param name="prm">The parameters.</param>
            <param name="authorizationHeader">The OAuth header.</param>
            <param name="options">The connection options for the request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the response.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Request.HttpPostAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken)">
            <summary>
            Sends a POST request as an asynchronous operation.
            </summary>
            <param name="url">The URL.</param>
            <param name="prm">The parameters.</param>
            <param name="authorizationHeader">The OAuth header.</param>
            <param name="options">The connection options for the request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the response.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Request.HttpPostWithMultipartFormDataAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken)">
            <summary>
            Sends a POST request with multipart/form-data as an asynchronous operation.
            </summary>
            <param name="url">The URL.</param>
            <param name="prm">The parameters.</param>
            <param name="authorizationHeader">The OAuth header.</param>
            <param name="options">The connection options for the request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the response.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Request.GenerateSignature(CoreTweet.Tokens,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Generates the signature.
            </summary>
            <param name="t">The tokens.</param>
            <param name="httpMethod">The HTTP method.</param>
            <param name="url">The URL.</param>
            <param name="prm">The parameters.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:CoreTweet.Request.GenerateParameters(System.String,System.String)">
            <summary>
            Generates the parameters.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="token">The token.</param>
            <returns>The parameters.</returns>
        </member>
        <member name="M:CoreTweet.Request.UrlEncode(System.String)">
            <summary>
            Encodes the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>The encoded text.</returns>
        </member>
        <member name="M:CoreTweet.Request.Rfc3986EscapeDataString(System.String)">
            <summary>
            Encodes the given string based on RFC3986.
            </summary>
            <param name="text">The value.</param>
            <returns>The encoded text.</returns>
        </member>
        <member name="T:CoreTweet.MethodType">
            <summary>
            Provides the type of the HTTP method.
            </summary>
        </member>
        <member name="F:CoreTweet.MethodType.Get">
            <summary>
            GET method.
            </summary>
        </member>
        <member name="F:CoreTweet.MethodType.Post">
            <summary>
            POST method.
            </summary>
        </member>
        <member name="T:CoreTweet.Rest.Account">
            <summary>
            Provides a set of methods for the wrapper of GET/POST account.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Account.VerifyCredentialsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a representation of the requesting user if authentication was successful as an asynchronous operation.</para>
            <para>Use this method to test if supplied user credentials are valid.</para>
            <para>Available parameters:</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user object.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.VerifyCredentialsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a representation of the requesting user if authentication was successful as an asynchronous operation.</para>
            <para>Use this method to test if supplied user credentials are valid.</para>
            <para>Available parameters:</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user object.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.VerifyCredentialsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a representation of the requesting user if authentication was successful as an asynchronous operation.</para>
            <para>Use this method to test if supplied user credentials are valid.</para>
            <para>Available parameters:</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user object.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.SettingsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings as an asynchronous operation.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>int</c> trend_location_woeid (optional)</para>
            <para>- <c>bool</c> sleep_time_enabled (optional)</para>
            <para>- <c>int</c> start_sleep_time (optional)</para>
            <para>- <c>int</c> end_sleep_time (optional)</para>
            <para>- <c>string</c> time_zone (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the settings of the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.SettingsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings as an asynchronous operation.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>int</c> trend_location_woeid (optional)</para>
            <para>- <c>bool</c> sleep_time_enabled (optional)</para>
            <para>- <c>int</c> start_sleep_time (optional)</para>
            <para>- <c>int</c> end_sleep_time (optional)</para>
            <para>- <c>string</c> time_zone (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the settings of the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.SettingsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings as an asynchronous operation.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>int</c> trend_location_woeid (optional)</para>
            <para>- <c>bool</c> sleep_time_enabled (optional)</para>
            <para>- <c>int</c> start_sleep_time (optional)</para>
            <para>- <c>int</c> end_sleep_time (optional)</para>
            <para>- <c>string</c> time_zone (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the settings of the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateDeliveryServiceAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sets which device Twitter delivers updates to for the authenticating user as an asynchronous operation.</para>
            <para>Sending none as the device parameter will disable SMS updates.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> device (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateDeliveryServiceAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Sets which device Twitter delivers updates to for the authenticating user as an asynchronous operation.</para>
            <para>Sending none as the device parameter will disable SMS updates.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> device (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateDeliveryServiceAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Sets which device Twitter delivers updates to for the authenticating user as an asynchronous operation.</para>
            <para>Sending none as the device parameter will disable SMS updates.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> device (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sets values that users are able to set under the "Account" tab of their settings page as an asynchronous operation.</para>
            <para>Only the parameters specified will be updated.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> location (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the settings of the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Sets values that users are able to set under the "Account" tab of their settings page as an asynchronous operation.</para>
            <para>Only the parameters specified will be updated.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> location (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the settings of the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Sets values that users are able to set under the "Account" tab of their settings page as an asynchronous operation.</para>
            <para>Only the parameters specified will be updated.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> location (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the settings of the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImageAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user's profile background image as an asynchronous operation.</para>
            <para>This method can also be used to enable or disable the profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image, tile or use must be provided when making this request.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> image (optional)</para>
            <para>- <c>bool</c> tile (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> use (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user object.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImageAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user's profile background image as an asynchronous operation.</para>
            <para>This method can also be used to enable or disable the profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image, tile or use must be provided when making this request.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> image (optional)</para>
            <para>- <c>bool</c> tile (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> use (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user object.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImageAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user's profile background image as an asynchronous operation.</para>
            <para>This method can also be used to enable or disable the profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image, tile or use must be provided when making this request.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> image (optional)</para>
            <para>- <c>bool</c> tile (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> use (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user object.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBannerAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user as an asynchronous operation.</para>
            <para>For best results, upload an &lt;3MB image that is exactly 1500px by 500px.</para>
            <para>Images will be resized for a number of display options. Users with an uploaded profile banner will have a profile_banner_url node in their Users objects.</para>
            <para>More information about sizing variations can be found in https://dev.twitter.com/docs/user-profile-images-and-banners.</para>
            <para>Profile banner images are processed asynchronously.</para>
            <para>The profile_banner_url and its variant sizes will not necessary be available directly after upload.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> banner (required)</para>
            <para>- <c>string</c> width (optional)</para>
            <para>- <c>string</c> height (optional)</para>
            <para>- <c>string</c> offset_left (optional)</para>
            <para>- <c>string</c> offset_top (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBannerAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user as an asynchronous operation.</para>
            <para>For best results, upload an &lt;3MB image that is exactly 1500px by 500px.</para>
            <para>Images will be resized for a number of display options. Users with an uploaded profile banner will have a profile_banner_url node in their Users objects.</para>
            <para>More information about sizing variations can be found in https://dev.twitter.com/docs/user-profile-images-and-banners.</para>
            <para>Profile banner images are processed asynchronously.</para>
            <para>The profile_banner_url and its variant sizes will not necessary be available directly after upload.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> banner (required)</para>
            <para>- <c>string</c> width (optional)</para>
            <para>- <c>string</c> height (optional)</para>
            <para>- <c>string</c> offset_left (optional)</para>
            <para>- <c>string</c> offset_top (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBannerAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user as an asynchronous operation.</para>
            <para>For best results, upload an &lt;3MB image that is exactly 1500px by 500px.</para>
            <para>Images will be resized for a number of display options. Users with an uploaded profile banner will have a profile_banner_url node in their Users objects.</para>
            <para>More information about sizing variations can be found in https://dev.twitter.com/docs/user-profile-images-and-banners.</para>
            <para>Profile banner images are processed asynchronously.</para>
            <para>The profile_banner_url and its variant sizes will not necessary be available directly after upload.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> banner (required)</para>
            <para>- <c>string</c> width (optional)</para>
            <para>- <c>string</c> height (optional)</para>
            <para>- <c>string</c> offset_left (optional)</para>
            <para>- <c>string</c> offset_top (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.RemoveProfileBannerAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes the uploaded profile banner for the authenticating user as an asynchronous operation.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.RemoveProfileBannerAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Removes the uploaded profile banner for the authenticating user as an asynchronous operation.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.RemoveProfileBannerAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Removes the uploaded profile banner for the authenticating user as an asynchronous operation.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileColorsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com as an asynchronous operation.</para>
            <para>Each parameter's value must be a valid hexidecimal value, and may be either three or six characters (ex: #fff or #ffffff).</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> profile_background_color (optional)</para>
            <para><c>string</c> profile_link_color (optional)</para>
            <para><c>string</c> profile_sidebar_border_color (optional)</para>
            <para><c>string</c> profile_sidebar_fill_color (optional)</para>
            <para><c>string</c> profile_text_color (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user object.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileColorsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com as an asynchronous operation.</para>
            <para>Each parameter's value must be a valid hexidecimal value, and may be either three or six characters (ex: #fff or #ffffff).</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> profile_background_color (optional)</para>
            <para><c>string</c> profile_link_color (optional)</para>
            <para><c>string</c> profile_sidebar_border_color (optional)</para>
            <para><c>string</c> profile_sidebar_fill_color (optional)</para>
            <para><c>string</c> profile_text_color (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user object.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileColorsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com.</para>
            <para>Each parameter's value must be a valid hexidecimal value, and may be either three or six characters (ex: #fff or #ffffff).</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> profile_background_color (optional)</para>
            <para><c>string</c> profile_link_color (optional)</para>
            <para><c>string</c> profile_sidebar_border_color (optional)</para>
            <para><c>string</c> profile_sidebar_fill_color (optional)</para>
            <para><c>string</c> profile_text_color (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user object.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImageAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user's profile image as an asynchronous operation.</para>
            <para>Note that this method expects raw multipart data, not a URL to an image.</para>
            <para>This method asynchronously processes the uploaded file before updating the user's profile image URL.</para>
            <para>You can either update your local cache the next time you request the user's information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users/show.</para>
            <para>Avaliable parameters:</para> 
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> image (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user object.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImageAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user's profile image as an asynchronous operation.</para>
            <para>Note that this method expects raw multipart data, not a URL to an image.</para>
            <para>This method asynchronously processes the uploaded file before updating the user's profile image URL.</para>
            <para>You can either update your local cache the next time you request the user's information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users/show.</para>
            <para>Avaliable parameters:</para> 
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> image (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user object.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImageAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user's profile image as an asynchronous operation.</para>
            <para>Note that this method expects raw multipart data, not a URL to an image.</para>
            <para>This method asynchronously processes the uploaded file before updating the user's profile image URL.</para>
            <para>You can either update your local cache the next time you request the user's information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users/show.</para>
            <para>Avaliable parameters:</para> 
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> image (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user object.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.VerifyCredentials(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a representation of the requesting user if authentication was successful.</para>
            <para>Use this method to test if supplied user credentials are valid.</para>
            <para>Available parameters:</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.VerifyCredentials(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a representation of the requesting user if authentication was successful.</para>
            <para>Use this method to test if supplied user credentials are valid.</para>
            <para>Available parameters:</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.VerifyCredentials``1(``0)">
            <summary>
            <para>Returns a representation of the requesting user if authentication was successful.</para>
            <para>Use this method to test if supplied user credentials are valid.</para>
            <para>Available parameters:</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.Settings(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>int</c> trend_location_woeid (optional)</para>
            <para>- <c>bool</c> sleep_time_enabled (optional)</para>
            <para>- <c>int</c> start_sleep_time (optional)</para>
            <para>- <c>int</c> end_sleep_time (optional)</para>
            <para>- <c>string</c> time_zone (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The settings of the user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.Settings(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>int</c> trend_location_woeid (optional)</para>
            <para>- <c>bool</c> sleep_time_enabled (optional)</para>
            <para>- <c>int</c> start_sleep_time (optional)</para>
            <para>- <c>int</c> end_sleep_time (optional)</para>
            <para>- <c>string</c> time_zone (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The settings of the user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.Settings``1(``0)">
            <summary>
            <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>int</c> trend_location_woeid (optional)</para>
            <para>- <c>bool</c> sleep_time_enabled (optional)</para>
            <para>- <c>int</c> start_sleep_time (optional)</para>
            <para>- <c>int</c> end_sleep_time (optional)</para>
            <para>- <c>string</c> time_zone (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The settings of the user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateDeliveryService(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sets which device Twitter delivers updates to for the authenticating user.</para>
            <para>Sending none as the device parameter will disable SMS updates.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> device (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateDeliveryService(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Sets which device Twitter delivers updates to for the authenticating user.</para>
            <para>Sending none as the device parameter will disable SMS updates.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> device (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateDeliveryService``1(``0)">
            <summary>
            <para>Sets which device Twitter delivers updates to for the authenticating user.</para>
            <para>Sending none as the device parameter will disable SMS updates.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> device (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfile(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sets values that users are able to set under the "Account" tab of their settings page.</para>
            <para>Only the parameters specified will be updated.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> location (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfile(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Sets values that users are able to set under the "Account" tab of their settings page.</para>
            <para>Only the parameters specified will be updated.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> location (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfile``1(``0)">
            <summary>
            <para>Sets values that users are able to set under the "Account" tab of their settings page.</para>
            <para>Only the parameters specified will be updated.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> location (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImage(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user's profile background image.</para>
            <para>This method can also be used to enable or disable the profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image, tile or use must be provided when making this request.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> image (optional)</para>
            <para>- <c>bool</c> tile (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> use (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImage(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Updates the authenticating user's profile background image.</para>
            <para>This method can also be used to enable or disable the profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image, tile or use must be provided when making this request.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> image (optional)</para>
            <para>- <c>bool</c> tile (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> use (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImage``1(``0)">
            <summary>
            <para>Updates the authenticating user's profile background image.</para>
            <para>This method can also be used to enable or disable the profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image, tile or use must be provided when making this request.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> image (optional)</para>
            <para>- <c>bool</c> tile (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> use (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBanner(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            <para>For best results, upload an &lt;3MB image that is exactly 1500px by 500px.</para>
            <para>Images will be resized for a number of display options. Users with an uploaded profile banner will have a profile_banner_url node in their Users objects.</para>
            <para>More information about sizing variations can be found in https://dev.twitter.com/docs/user-profile-images-and-banners.</para>
            <para>Profile banner images are processed asynchronously.</para>
            <para>The profile_banner_url and its variant sizes will not necessary be available directly after upload.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> banner (required)</para>
            <para>- <c>string</c> width (optional)</para>
            <para>- <c>string</c> height (optional)</para>
            <para>- <c>string</c> offset_left (optional)</para>
            <para>- <c>string</c> offset_top (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBanner(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            <para>For best results, upload an &lt;3MB image that is exactly 1500px by 500px.</para>
            <para>Images will be resized for a number of display options. Users with an uploaded profile banner will have a profile_banner_url node in their Users objects.</para>
            <para>More information about sizing variations can be found in https://dev.twitter.com/docs/user-profile-images-and-banners.</para>
            <para>Profile banner images are processed asynchronously.</para>
            <para>The profile_banner_url and its variant sizes will not necessary be available directly after upload.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> banner (required)</para>
            <para>- <c>string</c> width (optional)</para>
            <para>- <c>string</c> height (optional)</para>
            <para>- <c>string</c> offset_left (optional)</para>
            <para>- <c>string</c> offset_top (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBanner``1(``0)">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            <para>For best results, upload an &lt;3MB image that is exactly 1500px by 500px.</para>
            <para>Images will be resized for a number of display options. Users with an uploaded profile banner will have a profile_banner_url node in their Users objects.</para>
            <para>More information about sizing variations can be found in https://dev.twitter.com/docs/user-profile-images-and-banners.</para>
            <para>Profile banner images are processed asynchronously.</para>
            <para>The profile_banner_url and its variant sizes will not necessary be available directly after upload.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> banner (required)</para>
            <para>- <c>string</c> width (optional)</para>
            <para>- <c>string</c> height (optional)</para>
            <para>- <c>string</c> offset_left (optional)</para>
            <para>- <c>string</c> offset_top (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:CoreTweet.Rest.Account.RemoveProfileBanner(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes the uploaded profile banner for the authenticating user.</para>
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:CoreTweet.Rest.Account.RemoveProfileBanner(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Removes the uploaded profile banner for the authenticating user.</para>
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:CoreTweet.Rest.Account.RemoveProfileBanner``1(``0)">
            <summary>
            <para>Removes the uploaded profile banner for the authenticating user.</para>
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileColors(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com.</para>
            <para>Each parameter's value must be a valid hexidecimal value, and may be either three or six characters (ex: #fff or #ffffff).</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> profile_background_color (optional)</para>
            <para><c>string</c> profile_link_color (optional)</para>
            <para><c>string</c> profile_sidebar_border_color (optional)</para>
            <para><c>string</c> profile_sidebar_fill_color (optional)</para>
            <para><c>string</c> profile_text_color (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileColors(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com.</para>
            <para>Each parameter's value must be a valid hexidecimal value, and may be either three or six characters (ex: #fff or #ffffff).</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> profile_background_color (optional)</para>
            <para><c>string</c> profile_link_color (optional)</para>
            <para><c>string</c> profile_sidebar_border_color (optional)</para>
            <para><c>string</c> profile_sidebar_fill_color (optional)</para>
            <para><c>string</c> profile_text_color (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileColors``1(``0)">
            <summary>
            <para>Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com.</para>
            <para>Each parameter's value must be a valid hexidecimal value, and may be either three or six characters (ex: #fff or #ffffff).</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> profile_background_color (optional)</para>
            <para><c>string</c> profile_link_color (optional)</para>
            <para><c>string</c> profile_sidebar_border_color (optional)</para>
            <para><c>string</c> profile_sidebar_fill_color (optional)</para>
            <para><c>string</c> profile_text_color (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImage(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user's profile image.</para>
            <para>Note that this method expects raw multipart data, not a URL to an image.</para>
            <para>This method asynchronously processes the uploaded file before updating the user's profile image URL.</para>
            <para>You can either update your local cache the next time you request the user's information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users/show.</para>
            <para>Avaliable parameters:</para> 
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> image (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImage(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Updates the authenticating user's profile image.</para>
            <para>Note that this method expects raw multipart data, not a URL to an image.</para>
            <para>This method asynchronously processes the uploaded file before updating the user's profile image URL.</para>
            <para>You can either update your local cache the next time you request the user's information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users/show.</para>
            <para>Avaliable parameters:</para> 
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> image (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImage``1(``0)">
            <summary>
            <para>Updates the authenticating user's profile image.</para>
            <para>Note that this method expects raw multipart data, not a URL to an image.</para>
            <para>This method asynchronously processes the uploaded file before updating the user's profile image URL.</para>
            <para>You can either update your local cache the next time you request the user's information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users/show.</para>
            <para>Avaliable parameters:</para> 
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> image (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Blocks">
            <summary>
            Provides a set of methods for the wrapper of GET/POST blocks.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.IdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.IdsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.IdsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.ListAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Blocks the specified user from following the authenticating user as an asynchronous operation.</para>
            <para>In addition the blocked user will not show in the authenticating users mentions or timeline.</para>
            <para>If a follow or friend relationship exists it is destroyed.</para>
            <para>Note: Either screen_name or user_id must be provided.</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Blocks the specified user from following the authenticating user as an asynchronous operation.</para>
            <para>In addition the blocked user will not show in the authenticating users mentions or timeline.</para>
            <para>If a follow or friend relationship exists it is destroyed.</para>
            <para>Note: Either screen_name or user_id must be provided.</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.CreateAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Blocks the specified user from following the authenticating user as an asynchronous operation.</para>
            <para>In addition the blocked user will not show in the authenticating users mentions or timeline.</para>
            <para>If a follow or friend relationship exists it is destroyed.</para>
            <para>Note: Either screen_name or user_id must be provided.</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user as an asynchronous operation.</para>
            <para>Returns the un-blocked user in the requested format when successful.</para>
            <para>If relationships existed before the block was instated, they will not be restored.</para>
            <para>Note: Either screen_name or user_id must be provided.</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user as an asynchronous operation.</para>
            <para>Returns the un-blocked user in the requested format when successful.</para>
            <para>If relationships existed before the block was instated, they will not be restored.</para>
            <para>Note: Either screen_name or user_id must be provided.</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.DestroyAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user as an asynchronous operation.</para>
            <para>Returns the un-blocked user in the requested format when successful.</para>
            <para>If relationships existed before the block was instated, they will not be restored.</para>
            <para>Note: Either screen_name or user_id must be provided.</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Ids(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Ids(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Ids``1(``0)">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.EnumerateIds(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates numeric user ids the authenticating user is blocking.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.EnumerateIds(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Enumerates numeric user ids the authenticating user is blocking.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.EnumerateIds``1(CoreTweet.EnumerateMode,``0)">
            <summary>
            <para>Enumerates numeric user ids the authenticating user is blocking.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            <para>Avaliable parameters:</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            <para>Avaliable parameters:</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.List``1(``0)">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            <para>Avaliable parameters:</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.EnumerateList(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates numeric user objects the authenticating user is blocking.</para>
            <para>Avaliable parameters:</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.EnumerateList(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Enumerates numeric user objects the authenticating user is blocking.</para>
            <para>Avaliable parameters:</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.EnumerateList``1(CoreTweet.EnumerateMode,``0)">
            <summary>
            <para>Enumerates numeric user objects the authenticating user is blocking.</para>
            <para>Avaliable parameters:</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Blocks the specified user from following the authenticating user.</para>
            <para>In addition the blocked user will not show in the authenticating users mentions or timeline.</para>
            <para>If a follow or friend relationship exists it is destroyed.</para>
            <para>Note: Either screen_name or user_id must be provided.</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Blocks the specified user from following the authenticating user.</para>
            <para>In addition the blocked user will not show in the authenticating users mentions or timeline.</para>
            <para>If a follow or friend relationship exists it is destroyed.</para>
            <para>Note: Either screen_name or user_id must be provided.</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Create``1(``0)">
            <summary>
            <para>Blocks the specified user from following the authenticating user.</para>
            <para>In addition the blocked user will not show in the authenticating users mentions or timeline.</para>
            <para>If a follow or friend relationship exists it is destroyed.</para>
            <para>Note: Either screen_name or user_id must be provided.</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
            <para>Returns the un-blocked user in the requested format when successful.</para>
            <para>If relationships existed before the block was instated, they will not be restored.</para>
            <para>Note: Either screen_name or user_id must be provided.</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
            <para>Returns the un-blocked user in the requested format when successful.</para>
            <para>If relationships existed before the block was instated, they will not be restored.</para>
            <para>Note: Either screen_name or user_id must be provided.</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Destroy``1(``0)">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
            <para>Returns the un-blocked user in the requested format when successful.</para>
            <para>If relationships existed before the block was instated, they will not be restored.</para>
            <para>Note: Either screen_name or user_id must be provided.</para>
            <para>Avaliable parameters:</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            <para><c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="T:CoreTweet.Rest.DirectMessages">
            <summary>
            Provides a set of methods for the wrapper of GET/POST direct_messages.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.ReceivedAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the 20 most recent direct messages sent to the authenticating user as an asynchronous operation.</para>
            <para>Includes detailed information about the sender and recipient user.</para>
            <para>You can request up to 200 direct messages per call, up to a maximum of 800 incoming DMs.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> since_id (optional)</para>
            <para><c>long</c> max_id (optional)</para>
            <para><c>int</c> count (optional)</para>
            <para><c>int</c> page (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the direct messages.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.ReceivedAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the 20 most recent direct messages sent to the authenticating user as an asynchronous operation.</para>
            <para>Includes detailed information about the sender and recipient user.</para>
            <para>You can request up to 200 direct messages per call, up to a maximum of 800 incoming DMs.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> since_id (optional)</para>
            <para><c>long</c> max_id (optional)</para>
            <para><c>int</c> count (optional)</para>
            <para><c>int</c> page (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the direct messages.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.ReceivedAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the 20 most recent direct messages sent to the authenticating user as an asynchronous operation.</para>
            <para>Includes detailed information about the sender and recipient user.</para>
            <para>You can request up to 200 direct messages per call, up to a maximum of 800 incoming DMs.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> since_id (optional)</para>
            <para><c>long</c> max_id (optional)</para>
            <para><c>int</c> count (optional)</para>
            <para><c>int</c> page (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the direct messages.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.SentAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the 20 most recent direct messages sent by the authenticating user as an asynchronous operation.</para>
            <para>Includes detailed information about the sender and recipient user.</para>
            <para>You can request up to 200 direct messages per call, up to a maximum of 800 outgoing DMs.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> since_id (optional)</para>
            <para><c>long</c> max_id (optional)</para>
            <para><c>int</c> count (optional)</para>
            <para><c>int</c> page (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the direct messages.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.SentAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the 20 most recent direct messages sent by the authenticating user as an asynchronous operation.</para>
            <para>Includes detailed information about the sender and recipient user.</para>
            <para>You can request up to 200 direct messages per call, up to a maximum of 800 outgoing DMs.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> since_id (optional)</para>
            <para><c>long</c> max_id (optional)</para>
            <para><c>int</c> count (optional)</para>
            <para><c>int</c> page (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the direct messages.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.SentAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the 20 most recent direct messages sent by the authenticating user as an asynchronous operation.</para>
            <para>Includes detailed information about the sender and recipient user.</para>
            <para>You can request up to 200 direct messages per call, up to a maximum of 800 outgoing DMs.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> since_id (optional)</para>
            <para><c>long</c> max_id (optional)</para>
            <para><c>int</c> count (optional)</para>
            <para><c>int</c> page (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the direct messages.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a single direct message, specified by an id parameter as an asynchronous operation.</para>
            <para>Like the /1.1/direct_messages.format request, this method will include the user objects of the sender and recipient.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the direct messages.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a single direct message, specified by an id parameter as an asynchronous operation.</para>
            <para>Like the /1.1/direct_messages.format request, this method will include the user objects of the sender and recipient.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the direct messages.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.ShowAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a single direct message, specified by an id parameter as an asynchronous operation.</para>
            <para>Like the /1.1/direct_messages.format request, this method will include the user objects of the sender and recipient.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the direct messages.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.NewAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user as an asynchronous operation.</para>
            <para>Requires both the user and text parameters and must be a POST.</para>
            <para>Returns the sent message in the requested format if successful.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Note: Either user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>string</c> text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the direct message.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.NewAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user as an asynchronous operation.</para>
            <para>Requires both the user and text parameters and must be a POST.</para>
            <para>Returns the sent message in the requested format if successful.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Note: Either user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>string</c> text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the direct message.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.NewAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user as an asynchronous operation.</para>
            <para>Requires both the user and text parameters and must be a POST.</para>
            <para>Returns the sent message in the requested format if successful.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Note: Either user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>string</c> text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the direct message.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys the direct message specified in the required ID parameter as an asynchronous operation.</para>
            <para>The authenticating user must be the recipient of the specified direct message.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> id (required)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the direct message.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Destroys the direct message specified in the required ID parameter as an asynchronous operation.</para>
            <para>The authenticating user must be the recipient of the specified direct message.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> id (required)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the direct message.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.DestroyAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Destroys the direct message specified in the required ID parameter as an asynchronous operation.</para>
            <para>The authenticating user must be the recipient of the specified direct message.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> id (required)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the direct message.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Received(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the 20 most recent direct messages sent to the authenticating user.</para>
            <para>Includes detailed information about the sender and recipient user.</para>
            <para>You can request up to 200 direct messages per call, up to a maximum of 800 incoming DMs.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> since_id (optional)</para>
            <para><c>long</c> max_id (optional)</para>
            <para><c>int</c> count (optional)</para>
            <para><c>int</c> page (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Received(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the 20 most recent direct messages sent to the authenticating user.</para>
            <para>Includes detailed information about the sender and recipient user.</para>
            <para>You can request up to 200 direct messages per call, up to a maximum of 800 incoming DMs.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> since_id (optional)</para>
            <para><c>long</c> max_id (optional)</para>
            <para><c>int</c> count (optional)</para>
            <para><c>int</c> page (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Received``1(``0)">
            <summary>
            <para>Returns the 20 most recent direct messages sent to the authenticating user.</para>
            <para>Includes detailed information about the sender and recipient user.</para>
            <para>You can request up to 200 direct messages per call, up to a maximum of 800 incoming DMs.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> since_id (optional)</para>
            <para><c>long</c> max_id (optional)</para>
            <para><c>int</c> count (optional)</para>
            <para><c>int</c> page (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Sent(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the 20 most recent direct messages sent by the authenticating user.</para>
            <para>Includes detailed information about the sender and recipient user.</para>
            <para>You can request up to 200 direct messages per call, up to a maximum of 800 outgoing DMs.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> since_id (optional)</para>
            <para><c>long</c> max_id (optional)</para>
            <para><c>int</c> count (optional)</para>
            <para><c>int</c> page (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Sent(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the 20 most recent direct messages sent by the authenticating user.</para>
            <para>Includes detailed information about the sender and recipient user.</para>
            <para>You can request up to 200 direct messages per call, up to a maximum of 800 outgoing DMs.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> since_id (optional)</para>
            <para><c>long</c> max_id (optional)</para>
            <para><c>int</c> count (optional)</para>
            <para><c>int</c> page (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Sent``1(``0)">
            <summary>
            <para>Returns the 20 most recent direct messages sent by the authenticating user.</para>
            <para>Includes detailed information about the sender and recipient user.</para>
            <para>You can request up to 200 direct messages per call, up to a maximum of 800 outgoing DMs.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> since_id (optional)</para>
            <para><c>long</c> max_id (optional)</para>
            <para><c>int</c> count (optional)</para>
            <para><c>int</c> page (optional)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a single direct message, specified by an id parameter.</para>
            <para>Like the /1.1/direct_messages.format request, this method will include the user objects of the sender and recipient.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a single direct message, specified by an id parameter.</para>
            <para>Like the /1.1/direct_messages.format request, this method will include the user objects of the sender and recipient.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Show``1(``0)">
            <summary>
            <para>Returns a single direct message, specified by an id parameter.</para>
            <para>Like the /1.1/direct_messages.format request, this method will include the user objects of the sender and recipient.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.New(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user.</para>
            <para>Requires both the user and text parameters and must be a POST.</para>
            <para>Returns the sent message in the requested format if successful.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Note: Either user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>string</c> text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sent direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.New(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user.</para>
            <para>Requires both the user and text parameters and must be a POST.</para>
            <para>Returns the sent message in the requested format if successful.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Note: Either user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>string</c> text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sent direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.New``1(``0)">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user.</para>
            <para>Requires both the user and text parameters and must be a POST.</para>
            <para>Returns the sent message in the requested format if successful.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Note: Either user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> user_id (optional)</para>
            <para><c>string</c> screen_name (optional)</para>
            <para><c>string</c> text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sent direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys the direct message specified in the required ID parameter.</para>
            <para>The authenticating user must be the recipient of the specified direct message.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> id (required)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Destroys the direct message specified in the required ID parameter.</para>
            <para>The authenticating user must be the recipient of the specified direct message.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> id (required)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Destroy``1(``0)">
            <summary>
            <para>Destroys the direct message specified in the required ID parameter.</para>
            <para>The authenticating user must be the recipient of the specified direct message.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> id (required)</para>
            <para><c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Favorites">
            <summary>
            Provides a set of methods for the wrapper of GET/POST favorites.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optonal)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id (optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optonal)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id (optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.ListAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optonal)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id (optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Favorites the status specified in the ID parameter as the authenticating user as an asynchronous operation.</para>
            <para>Returns the favorite status when successful.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the favorited status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Favorites the status specified in the ID parameter as the authenticating user as an asynchronous operation.</para>
            <para>Returns the favorite status when successful.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the favorited status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.CreateAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Favorites the status specified in the ID parameter as the authenticating user as an asynchronous operation.</para>
            <para>Returns the favorite status when successful.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the favorited status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-favorites the status specified in the ID parameter as the authenticating user as an asynchronous operation.</para>
            <para>Returns the un-favorited status in the requested format when successful.</para>
            <para>This process invoked by this method is asynchronous.</para>
            <para>The immediately returned status may not indicate the resultant favorited status of the tweet.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (ooptional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the destroied status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Un-favorites the status specified in the ID parameter as the authenticating user as an asynchronous operation.</para>
            <para>Returns the un-favorited status in the requested format when successful.</para>
            <para>This process invoked by this method is asynchronous.</para>
            <para>The immediately returned status may not indicate the resultant favorited status of the tweet.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (ooptional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the destroied status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.DestroyAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Un-favorites the status specified in the ID parameter as the authenticating user as an asynchronous operation.</para>
            <para>Returns the un-favorited status in the requested format when successful.</para>
            <para>This process invoked by this method is asynchronous.</para>
            <para>The immediately returned status may not indicate the resultant favorited status of the tweet.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (ooptional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the destroied status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optonal)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id (optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optonal)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id (optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.List``1(``0)">
            <summary>
            <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optonal)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id (optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Returns the favorite status when successful.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The favorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Returns the favorite status when successful.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The favorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.Create``1(``0)">
            <summary>
            <para>Favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Returns the favorite status when successful.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The favorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Returns the un-favorited status in the requested format when successful.</para>
            <para>This process invoked by this method is asynchronous.</para>
            <para>The immediately returned status may not indicate the resultant favorited status of the tweet.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (ooptional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroied status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Un-favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Returns the un-favorited status in the requested format when successful.</para>
            <para>This process invoked by this method is asynchronous.</para>
            <para>The immediately returned status may not indicate the resultant favorited status of the tweet.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (ooptional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroied status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.Destroy``1(``0)">
            <summary>
            <para>Un-favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Returns the un-favorited status in the requested format when successful.</para>
            <para>This process invoked by this method is asynchronous.</para>
            <para>The immediately returned status may not indicate the resultant favorited status of the tweet.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (ooptional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroied status.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Followers">
            <summary>
            Provides a set of methods for the wrapper of GET followers.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Followers.IdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user as an asynchronous operation.</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.IdsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user as an asynchronous operation.</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.IdsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user as an asynchronous operation.</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user as an asynchronous operation.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities</para>
            </summary>
            <param name="parameters">The parameters</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user as an asynchronous operation.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities</para>
            </summary>
            <param name="parameters">The parameters</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.ListAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user as an asynchronous operation.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities</para>
            </summary>
            <param name="parameters">The parameters</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.Ids(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.Ids(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.Ids``1(``0)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateIds(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates user IDs for every user following the specified user.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateIds(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Enumerates user IDs for every user following the specified user.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateIds``1(CoreTweet.EnumerateMode,``0)">
            <summary>
            <para>Enumerates user IDs for every user following the specified user.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities</para>
            </summary>
            <param name="parameters">The parameters</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities</para>
            </summary>
            <param name="parameters">The parameters</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.List``1(``0)">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities</para>
            </summary>
            <param name="parameters">The parameters</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateList(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates user objects for users following the specified user.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateList(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Enumerates user objects for users following the specified user.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateList``1(CoreTweet.EnumerateMode,``0)">
            <summary>
            <para>Enumerates user objects for users following the specified user.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Friends">
            <summary>
            Provides a set of methods for the wrapper of GET friends.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Friends.IdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends") as an asynchronous operation.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.IdsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends") as an asynchronous operation.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.IdsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends") as an asynchronous operation.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends") as an asynchronous operation.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends") as an asynchronous operation.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.ListAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends") as an asynchronous operation.</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.Ids(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.Ids(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.Ids``1(``0)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateIds(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateIds(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Enumerates user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateIds``1(CoreTweet.EnumerateMode,``0)">
            <summary>
            <para>Enumerates user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.List``1(``0)">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateList(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates user objects for every user the specified user is following (otherwise known as their "friends").</para> 
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateList(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Enumerates user objects for every user the specified user is following (otherwise known as their "friends").</para> 
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateList``1(CoreTweet.EnumerateMode,``0)">
            <summary>
            <para>Enumerates user objects for every user the specified user is following (otherwise known as their "friends").</para> 
            <para>At this time, results are ordered with the most recent following first; however, this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Friendships">
            <summary>
            Provides a set of methods for the wrapper of GET/POST friendships.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.NoRetweetsIdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from as an asynchronous operation.</para>
            <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.NoRetweetsIdsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from as an asynchronous operation.</para>
            <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.NoRetweetsIdsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from as an asynchronous operation.</para>
            <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.IncomingAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.IncomingAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.IncomingAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.OutgoingAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request as an asynchronous operation.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.OutgoingAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request as an asynchronous operation.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.OutgoingAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request as an asynchronous operation.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.LookupAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided as an asynchronous operation.</para>
            <para>Values for connections can be: following, following_requested, followed_by, none.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / IEnumerable&lt;string&gt; screen_name (optional)</para>
            <para>- <c>string</c> / IEnumerable&lt;long&gt; user_id (ooptional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the Friendships.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.LookupAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided as an asynchronous operation.</para>
            <para>Values for connections can be: following, following_requested, followed_by, none.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / IEnumerable&lt;string&gt; screen_name (optional)</para>
            <para>- <c>string</c> / IEnumerable&lt;long&gt; user_id (ooptional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the Friendships.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.LookupAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided as an asynchronous operation.</para>
            <para>Values for connections can be: following, following_requested, followed_by, none.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / IEnumerable&lt;string&gt; screen_name (optional)</para>
            <para>- <c>string</c> / IEnumerable&lt;long&gt; user_id (ooptional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the Friendships.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users as an asynchronous operation.</para>
            <para>Note: At least one source and one target, whether specified by IDs or screen_names, should be provided to this method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> source_id (optional)</para>
            <para>- <c>string</c> source_screen_name (optional)</para>
            <para>- <c>long</c> target_id (optional)</para>
            <para>- <c>string</c> target_screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the Friendships.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users as an asynchronous operation.</para>
            <para>Note: At least one source and one target, whether specified by IDs or screen_names, should be provided to this method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> source_id (optional)</para>
            <para>- <c>string</c> source_screen_name (optional)</para>
            <para>- <c>long</c> target_id (optional)</para>
            <para>- <c>string</c> target_screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the Friendships.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.ShowAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users as an asynchronous operation.</para>
            <para>Note: At least one source and one target, whether specified by IDs or screen_names, should be provided to this method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> source_id (optional)</para>
            <para>- <c>string</c> source_screen_name (optional)</para>
            <para>- <c>long</c> target_id (optional)</para>
            <para>- <c>string</c> target_screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the Friendships.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter as an asynchronous operation.</para>
            <para>Returns the befriended user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>bool</c> follow (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter as an asynchronous operation.</para>
            <para>Returns the befriended user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>bool</c> follow (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.CreateAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter as an asynchronous operation.</para>
            <para>Returns the befriended user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>bool</c> follow (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter as an asynchronous operation.</para>
            <para>Returns the unfollowed user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter as an asynchronous operation.</para>
            <para>Returns the unfollowed user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.DestroyAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter as an asynchronous operation.</para>
            <para>Returns the unfollowed user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.UpdateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user as an asynchronous operation.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>bool</c> device (optional)</para>
            <para>- <c>bool</c> retweets (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the Friendships.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.UpdateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user as an asynchronous operation.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>bool</c> device (optional)</para>
            <para>- <c>bool</c> retweets (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the Friendships.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.UpdateAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user as an asynchronous operation.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>bool</c> device (optional)</para>
            <para>- <c>bool</c> retweets (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the Friendships.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.NoRetweetsIds(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
            <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Ids.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.NoRetweetsIds(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
            <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Ids.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.NoRetweetsIds``1(``0)">
            <summary>
            <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
            <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Ids.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Incoming(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Ids.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Incoming(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Ids.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Incoming``1(``0)">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Avaliable parameters:</para>
            <para><c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Ids.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.EnumerateIncoming(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerate numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.EnumerateIncoming(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Enumerate numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.EnumerateIncoming``1(CoreTweet.EnumerateMode,``0)">
            <summary>
            <para>Enumerate numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Outgoing(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Outgoing(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Outgoing``1(``0)">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.EnumerateOutgoing(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerate numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.EnumerateOutgoing(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Enumerate numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.EnumerateOutgoing``1(CoreTweet.EnumerateMode,``0)">
            <summary>
            <para>Enumerate numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Lookup(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
            <para>Values for connections can be: following, following_requested, followed_by, none.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / IEnumerable&lt;string&gt; screen_name (optional)</para>
            <para>- <c>string</c> / IEnumerable&lt;long&gt; user_id (ooptional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Friendships.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Lookup(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
            <para>Values for connections can be: following, following_requested, followed_by, none.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / IEnumerable&lt;string&gt; screen_name (optional)</para>
            <para>- <c>string</c> / IEnumerable&lt;long&gt; user_id (ooptional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Friendships.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Lookup``1(``0)">
            <summary>
            <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
            <para>Values for connections can be: following, following_requested, followed_by, none.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / IEnumerable&lt;string&gt; screen_name (optional)</para>
            <para>- <c>string</c> / IEnumerable&lt;long&gt; user_id (ooptional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Friendships.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            <para>Note: At least one source and one target, whether specified by IDs or screen_names, should be provided to this method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> source_id (optional)</para>
            <para>- <c>string</c> source_screen_name (optional)</para>
            <para>- <c>long</c> target_id (optional)</para>
            <para>- <c>string</c> target_screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            <para>Note: At least one source and one target, whether specified by IDs or screen_names, should be provided to this method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> source_id (optional)</para>
            <para>- <c>string</c> source_screen_name (optional)</para>
            <para>- <c>long</c> target_id (optional)</para>
            <para>- <c>string</c> target_screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Show``1(``0)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            <para>Note: At least one source and one target, whether specified by IDs or screen_names, should be provided to this method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> source_id (optional)</para>
            <para>- <c>string</c> source_screen_name (optional)</para>
            <para>- <c>long</c> target_id (optional)</para>
            <para>- <c>string</c> target_screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
            <para>Returns the befriended user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>bool</c> follow (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
            <para>Returns the befriended user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>bool</c> follow (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Create``1(``0)">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
            <para>Returns the befriended user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>bool</c> follow (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
            <para>Returns the unfollowed user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
            <para>Returns the unfollowed user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Destroy``1(``0)">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
            <para>Returns the unfollowed user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Update(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>bool</c> device (optional)</para>
            <para>- <c>bool</c> retweets (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Update(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>bool</c> device (optional)</para>
            <para>- <c>bool</c> retweets (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Update``1(``0)">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>bool</c> device (optional)</para>
            <para>- <c>bool</c> retweets (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Geo">
            <summary>
            Provides a set of methods for the wrapper of GET/POST geo.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Geo.IdAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all the information about a known place as an asynchronous operation.</para>
            <para>Avaliable parameters: </para>
            <para><c>string</c> place_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the geo.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.IdAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns all the information about a known place as an asynchronous operation.</para>
            <para>Avaliable parameters: </para>
            <para><c>string</c> place_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the geo.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.IdAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns all the information about a known place as an asynchronous operation.</para>
            <para>Avaliable parameters: </para>
            <para><c>string</c> place_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the geo.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SimilarPlacesAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Locates places near the given coordinates which are similar in name as an asynchronous operation.</para>
            <para>Conceptually you would use this method to get a list of known places to choose from first.</para>
            <para>Then, if the desired place doesn't exist, make a request to POST geo/place to create a new one.</para>
            <para>The token contained in the response is the token needed to be able to create a new place.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the places and the token.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SimilarPlacesAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Locates places near the given coordinates which are similar in name as an asynchronous operation.</para>
            <para>Conceptually you would use this method to get a list of known places to choose from first.</para>
            <para>Then, if the desired place doesn't exist, make a request to POST geo/place to create a new one.</para>
            <para>The token contained in the response is the token needed to be able to create a new place.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the places and the token.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SimilarPlacesAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Locates places near the given coordinates which are similar in name as an asynchronous operation.</para>
            <para>Conceptually you would use this method to get a list of known places to choose from first.</para>
            <para>Then, if the desired place doesn't exist, make a request to POST geo/place to create a new one.</para>
            <para>The token contained in the response is the token needed to be able to create a new place.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the places and the token.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SearchAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Search for places that can be attached to a statuses/update as an asynchronous operation.</para>
            <para>Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status.</para>
            <para>Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to POST statuses/update.</para>
            <para>This is the recommended method to use find places that can be attached to statuses/update.</para>
            <para>Unlike GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated.</para>
            <para>This approach is also preferred for interactive place matching with the user.</para>
            <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> query (optional)</para>
            <para>- <c>string</c> ip (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> attribute:street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the places.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SearchAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Search for places that can be attached to a statuses/update as an asynchronous operation.</para>
            <para>Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status.</para>
            <para>Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to POST statuses/update.</para>
            <para>This is the recommended method to use find places that can be attached to statuses/update.</para>
            <para>Unlike GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated.</para>
            <para>This approach is also preferred for interactive place matching with the user.</para>
            <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> query (optional)</para>
            <para>- <c>string</c> ip (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> attribute:street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the places.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SearchAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Search for places that can be attached to a statuses/update as an asynchronous operation.</para>
            <para>Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status.</para>
            <para>Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to POST statuses/update.</para>
            <para>This is the recommended method to use find places that can be attached to statuses/update.</para>
            <para>Unlike GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated.</para>
            <para>This approach is also preferred for interactive place matching with the user.</para>
            <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> query (optional)</para>
            <para>- <c>string</c> ip (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> attribute:street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the places.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.ReverseGeocodeAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status as an asynchronous operation.</para>
            <para>This request is an informative call and will deliver generalized results about geography.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the places.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.ReverseGeocodeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status as an asynchronous operation.</para>
            <para>This request is an informative call and will deliver generalized results about geography.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the places.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.ReverseGeocodeAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status as an asynchronous operation.</para>
            <para>This request is an informative call and will deliver generalized results about geography.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the places.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.Id(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all the information about a known place.</para>
            <para>Avaliable parameters: </para>
            <para><c>string</c> place_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The geo.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.Id(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns all the information about a known place.</para>
            <para>Avaliable parameters: </para>
            <para><c>string</c> place_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The geo.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.Id``1(``0)">
            <summary>
            <para>Returns all the information about a known place.</para>
            <para>Avaliable parameters: </para>
            <para><c>string</c> place_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The geo.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SimilarPlaces(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Locates places near the given coordinates which are similar in name.</para>
            <para>Conceptually you would use this method to get a list of known places to choose from first.</para>
            <para>Then, if the desired place doesn't exist, make a request to POST geo/place to create a new one.</para>
            <para>The token contained in the response is the token needed to be able to create a new place.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places and the token.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SimilarPlaces(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Locates places near the given coordinates which are similar in name.</para>
            <para>Conceptually you would use this method to get a list of known places to choose from first.</para>
            <para>Then, if the desired place doesn't exist, make a request to POST geo/place to create a new one.</para>
            <para>The token contained in the response is the token needed to be able to create a new place.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places and the token.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SimilarPlaces``1(``0)">
            <summary>
            <para>Locates places near the given coordinates which are similar in name.</para>
            <para>Conceptually you would use this method to get a list of known places to choose from first.</para>
            <para>Then, if the desired place doesn't exist, make a request to POST geo/place to create a new one.</para>
            <para>The token contained in the response is the token needed to be able to create a new place.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places and the token.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.Search(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Search for places that can be attached to a statuses/update.</para>
            <para>Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status.</para>
            <para>Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to POST statuses/update.</para>
            <para>This is the recommended method to use find places that can be attached to statuses/update.</para>
            <para>Unlike GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated.</para>
            <para>This approach is also preferred for interactive place matching with the user.</para>
            <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> query (optional)</para>
            <para>- <c>string</c> ip (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> attribute:street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.Search(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Search for places that can be attached to a statuses/update.</para>
            <para>Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status.</para>
            <para>Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to POST statuses/update.</para>
            <para>This is the recommended method to use find places that can be attached to statuses/update.</para>
            <para>Unlike GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated.</para>
            <para>This approach is also preferred for interactive place matching with the user.</para>
            <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> query (optional)</para>
            <para>- <c>string</c> ip (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> attribute:street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.Search``1(``0)">
            <summary>
            <para>Search for places that can be attached to a statuses/update.</para>
            <para>Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status.</para>
            <para>Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to POST statuses/update.</para>
            <para>This is the recommended method to use find places that can be attached to statuses/update.</para>
            <para>Unlike GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated.</para>
            <para>This approach is also preferred for interactive place matching with the user.</para>
            <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> query (optional)</para>
            <para>- <c>string</c> ip (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> attribute:street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.ReverseGeocode(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
            <para>This request is an informative call and will deliver generalized results about geography.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.ReverseGeocode(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
            <para>This request is an informative call and will deliver generalized results about geography.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.ReverseGeocode``1(``0)">
            <summary>
            <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
            <para>This request is an informative call and will deliver generalized results about geography.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Help">
            <summary>
            Provides a set of methods for the wrapper of GET help.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Help.ConfigurationAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths as an asynchronous operation.</para>
            <para>It is recommended applications request this endpoint when they are loaded, but no more than once a day.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the configurations.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.ConfigurationAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths as an asynchronous operation.</para>
            <para>It is recommended applications request this endpoint when they are loaded, but no more than once a day.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the configurations.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.ConfigurationAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths as an asynchronous operation.</para>
            <para>It is recommended applications request this endpoint when they are loaded, but no more than once a day.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the configurations.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.LanguagesAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the list of languages supported by Twitter along with their ISO 639-1 code as an asynchronous operation.</para>
            <para>The ISO 639-1 code is the two letter value to use if you include lang with any of your requests.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the languages.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.LanguagesAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the list of languages supported by Twitter along with their ISO 639-1 code as an asynchronous operation.</para>
            <para>The ISO 639-1 code is the two letter value to use if you include lang with any of your requests.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the languages.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.LanguagesAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the list of languages supported by Twitter along with their ISO 639-1 code as an asynchronous operation.</para>
            <para>The ISO 639-1 code is the two letter value to use if you include lang with any of your requests.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the languages.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.PrivacyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns Twitter's Privacy Policy as an asynchronous operation.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the sentense.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.PrivacyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns Twitter's Privacy Policy as an asynchronous operation.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the sentense.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.PrivacyAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns Twitter's Privacy Policy as an asynchronous operation.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the sentense.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.TosAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the Twitter Terms of Service in the requested format as an asynchronous operation.</para>
            <para>These are not the same as the Developer Rules of the Road.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the sentense.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.TosAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the Twitter Terms of Service in the requested format as an asynchronous operation.</para>
            <para>These are not the same as the Developer Rules of the Road.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the sentense.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.TosAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the Twitter Terms of Service in the requested format as an asynchronous operation.</para>
            <para>These are not the same as the Developer Rules of the Road.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the sentense.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatusAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c>string / <c>IEnumerable&lt;string&gt;</c> resources (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the dictionary.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatusAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c>string / <c>IEnumerable&lt;string&gt;</c> resources (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the dictionary.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatusAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c>string / <c>IEnumerable&lt;string&gt;</c> resources (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the dictionary.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Configuration(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
            <para>It is recommended applications request this endpoint when they are loaded, but no more than once a day.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Configurations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Configuration(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
            <para>It is recommended applications request this endpoint when they are loaded, but no more than once a day.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Configurations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Configuration``1(``0)">
            <summary>
            <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
            <para>It is recommended applications request this endpoint when they are loaded, but no more than once a day.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Configurations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Languages(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the list of languages supported by Twitter along with their ISO 639-1 code.</para>
            <para>The ISO 639-1 code is the two letter value to use if you include lang with any of your requests.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Languages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Languages(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the list of languages supported by Twitter along with their ISO 639-1 code.</para>
            <para>The ISO 639-1 code is the two letter value to use if you include lang with any of your requests.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Languages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Languages``1(``0)">
            <summary>
            <para>Returns the list of languages supported by Twitter along with their ISO 639-1 code.</para>
            <para>The ISO 639-1 code is the two letter value to use if you include lang with any of your requests.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Languages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Privacy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns Twitter's Privacy Policy.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Privacy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns Twitter's Privacy Policy.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Privacy``1(``0)">
            <summary>
            <para>Returns Twitter's Privacy Policy.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Tos(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the Twitter Terms of Service in the requested format.</para>
            <para>These are not the same as the Developer Rules of the Road.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Tos(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the Twitter Terms of Service in the requested format.</para>
            <para>These are not the same as the Developer Rules of the Road.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Tos``1(``0)">
            <summary>
            <para>Returns the Twitter Terms of Service in the requested format.</para>
            <para>These are not the same as the Developer Rules of the Road.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatus(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c>string / <c>IEnumerable&lt;string&gt;</c> resources (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatus(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c>string / <c>IEnumerable&lt;string&gt;</c> resources (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatus``1(``0)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c>string / <c>IEnumerable&lt;string&gt;</c> resources (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Lists">
            <summary>
            Provides a set of methods for the wrapper of GET/POST lists.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own as an asynchronous operation.</para>
            <para>The user is specified using the user_id or screen_name parameters.</para>
            <para>If no user is given, the authenticating user is used.</para>
            <para>This method used to be GET lists in version 1.0 of the API and has been renamed for consistency with other call.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the lists.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own as an asynchronous operation.</para>
            <para>The user is specified using the user_id or screen_name parameters.</para>
            <para>If no user is given, the authenticating user is used.</para>
            <para>This method used to be GET lists in version 1.0 of the API and has been renamed for consistency with other call.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the lists.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ListAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own as an asynchronous operation.</para>
            <para>The user is specified using the user_id or screen_name parameters.</para>
            <para>If no user is given, the authenticating user is used.</para>
            <para>This method used to be GET lists in version 1.0 of the API and has been renamed for consistency with other call.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the lists.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.MembershipsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the lists the specified user has been added to as an asynchronous operation.</para>
            <para>If user_id or screen_name are not provided the memberships for the authenticating user are returned.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> sereen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.MembershipsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the lists the specified user has been added to as an asynchronous operation.</para>
            <para>If user_id or screen_name are not provided the memberships for the authenticating user are returned.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> sereen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.MembershipsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the lists the specified user has been added to as an asynchronous operation.</para>
            <para>If user_id or screen_name are not provided the memberships for the authenticating user are returned.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> sereen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the specified list as an asynchronous operation.</para>
            <para>Private lists will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the lists.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the specified list as an asynchronous operation.</para>
            <para>Private lists will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the lists.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ShowAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the specified list as an asynchronous operation.</para>
            <para>Private lists will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the lists.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.SubscriptionsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default as an asynchronous operation.</para>
            <para>Does not include the user's own lists.</para>
            <para>Note: A user_id or screen_name must be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the lists.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.SubscriptionsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default as an asynchronous operation.</para>
            <para>Does not include the user's own lists.</para>
            <para>Note: A user_id or screen_name must be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the lists.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.SubscriptionsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default as an asynchronous operation.</para>
            <para>Does not include the user's own lists.</para>
            <para>Note: A user_id or screen_name must be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the lists.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.StatusesAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns tweet timeline for members of the specified list.</para>
            <para>Retweets are included by default.</para>
            <para>You can use the include_rts=false parameter to omit retweet objects.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.StatusesAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns tweet timeline for members of the specified list.</para>
            <para>Retweets are included by default.</para>
            <para>You can use the include_rts=false parameter to omit retweet objects.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.StatusesAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns tweet timeline for members of the specified list.</para>
            <para>Retweets are included by default.</para>
            <para>You can use the include_rts=false parameter to omit retweet objects.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Creates a new list for the authenticated user.</para>
            <para>Note that you can't create more than 20 lists per account.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Creates a new list for the authenticated user.</para>
            <para>Note that you can't create more than 20 lists per account.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.CreateAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a new list for the authenticated user.</para>
            <para>Note that you can't create more than 20 lists per account.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Deletes the specified list. The authenticated user must own the list to be able to destroy it.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the destroied list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the specified list. The authenticated user must own the list to be able to destroy it.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the destroied list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.DestroyAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the specified list. The authenticated user must own the list to be able to destroy it.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the destroied list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.UpdateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the specified list.</para>
            <para>The authenticated user must own the list to be able to update it.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.UpdateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the specified list.</para>
            <para>The authenticated user must own the list to be able to update it.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.UpdateAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Updates the specified list.</para>
            <para>The authenticated user must own the list to be able to update it.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
            <para>The user is specified using the user_id or screen_name parameters.</para>
            <para>If no user is given, the authenticating user is used.</para>
            <para>This method used to be GET lists in version 1.0 of the API and has been renamed for consistency with other call.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
            <para>The user is specified using the user_id or screen_name parameters.</para>
            <para>If no user is given, the authenticating user is used.</para>
            <para>This method used to be GET lists in version 1.0 of the API and has been renamed for consistency with other call.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.List``1(``0)">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
            <para>The user is specified using the user_id or screen_name parameters.</para>
            <para>If no user is given, the authenticating user is used.</para>
            <para>This method used to be GET lists in version 1.0 of the API and has been renamed for consistency with other call.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Memberships(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            <para>If user_id or screen_name are not provided the memberships for the authenticating user are returned.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> sereen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Memberships(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            <para>If user_id or screen_name are not provided the memberships for the authenticating user are returned.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> sereen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Memberships``1(``0)">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            <para>If user_id or screen_name are not provided the memberships for the authenticating user are returned.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> sereen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateMemberships(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates the lists the specified user has been added to.</para>
            <para>If user_id or screen_name are not provided the memberships for the authenticating user are returned.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> sereen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateMemberships(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Enumerates the lists the specified user has been added to.</para>
            <para>If user_id or screen_name are not provided the memberships for the authenticating user are returned.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> sereen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateMemberships``1(CoreTweet.EnumerateMode,``0)">
            <summary>
            <para>Enumerates the lists the specified user has been added to.</para>
            <para>If user_id or screen_name are not provided the memberships for the authenticating user are returned.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> sereen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the specified list.</para>
            <para>Private lists will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the specified list.</para>
            <para>Private lists will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Show``1(``0)">
            <summary>
            <para>Returns the specified list.</para>
            <para>Private lists will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Subscriptions(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default.</para>
            <para>Does not include the user's own lists.</para>
            <para>Note: A user_id or screen_name must be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Subscriptions(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default.</para>
            <para>Does not include the user's own lists.</para>
            <para>Note: A user_id or screen_name must be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Subscriptions``1(``0)">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default.</para>
            <para>Does not include the user's own lists.</para>
            <para>Note: A user_id or screen_name must be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateSubscriptions(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerate lists the specified user is subscribed to, 20 lists per page by default.</para>
            <para>Does not include the user's own lists.</para>
            <para>Note: A user_id or screen_name must be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateSubscriptions(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Enumerate lists the specified user is subscribed to, 20 lists per page by default.</para>
            <para>Does not include the user's own lists.</para>
            <para>Note: A user_id or screen_name must be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateSubscriptions``1(CoreTweet.EnumerateMode,``0)">
            <summary>
            <para>Enumerate lists the specified user is subscribed to, 20 lists per page by default.</para>
            <para>Does not include the user's own lists.</para>
            <para>Note: A user_id or screen_name must be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Statuses(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns tweet timeline for members of the specified list.</para>
            <para>Retweets are included by default.</para>
            <para>You can use the include_rts=false parameter to omit retweet objects.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Statuses(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns tweet timeline for members of the specified list.</para>
            <para>Retweets are included by default.</para>
            <para>You can use the include_rts=false parameter to omit retweet objects.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Statuses``1(``0)">
            <summary>
            <para>Returns tweet timeline for members of the specified list.</para>
            <para>Retweets are included by default.</para>
            <para>You can use the include_rts=false parameter to omit retweet objects.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Creates a new list for the authenticated user.</para>
            <para>Note that you can't create more than 20 lists per account.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Creates a new list for the authenticated user.</para>
            <para>Note that you can't create more than 20 lists per account.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Create``1(``0)">
            <summary>
            <para>Creates a new list for the authenticated user.</para>
            <para>Note that you can't create more than 20 lists per account.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Deletes the specified list. The authenticated user must own the list to be able to destroy it.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroied list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Deletes the specified list. The authenticated user must own the list to be able to destroy it.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroied list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Destroy``1(``0)">
            <summary>
            <para>Deletes the specified list. The authenticated user must own the list to be able to destroy it.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroied list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Update(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the specified list.</para>
            <para>The authenticated user must own the list to be able to update it.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Update(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Updates the specified list.</para>
            <para>The authenticated user must own the list to be able to update it.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Update``1(``0)">
            <summary>
            <para>Updates the specified list.</para>
            <para>The authenticated user must own the list to be able to update it.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="P:CoreTweet.Rest.Lists.Members">
            <summary>
            Gets the wrapper of lists/members 
            </summary>
        </member>
        <member name="P:CoreTweet.Rest.Lists.Subscribers">
            <summary>
            Gets the wrapper of lists/subscribers
            </summary>
        </member>
        <member name="T:CoreTweet.Rest.Members">
            <summary>
            Provides a set of methods for the wrapper of GET/POST lists/members.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Members.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the members of the specified list as an asynchronous operation.</para>
            <para>Private list members will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_sereen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the lists.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the members of the specified list as an asynchronous operation.</para>
            <para>Private list members will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_sereen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the lists.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.ListAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the members of the specified list as an asynchronous operation.</para>
            <para>Private list members will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_sereen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the lists.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Check if the specified user is a member of the specified list as an asynchronous operation.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> sereen_name (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a member of the specified list as an asynchronous operation.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> sereen_name (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.ShowAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a member of the specified list as an asynchronous operation.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> sereen_name (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Add a member to a list as an asynchronous operation.</para>
            <para>The authenticated user must own the list to be able to add members to it.</para>
            <para>Note that lists can't have more than 500 members.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para><para> </para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Add a member to a list as an asynchronous operation.</para>
            <para>The authenticated user must own the list to be able to add members to it.</para>
            <para>Note that lists can't have more than 500 members.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para><para> </para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.CreateAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Add a member to a list as an asynchronous operation.</para>
            <para>The authenticated user must own the list to be able to add members to it.</para>
            <para>Note that lists can't have more than 500 members.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para><para> </para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.CreateAllAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names as an asynchronous operation.</para>
            <para>The authenticated user must own the list to be able to add members to it.</para>
            <para>Note that lists can't have more than 500 members, and you are limited to adding up to 100 members to a list at a time with this method.</para>
            <para>Please note that there can be issues with lists that rapidly remove and add memberships.</para>
            <para>Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;long&gt;</c> user_id (optional)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;string&gt;</c> screen_name (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.CreateAllAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names as an asynchronous operation.</para>
            <para>The authenticated user must own the list to be able to add members to it.</para>
            <para>Note that lists can't have more than 500 members, and you are limited to adding up to 100 members to a list at a time with this method.</para>
            <para>Please note that there can be issues with lists that rapidly remove and add memberships.</para>
            <para>Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;long&gt;</c> user_id (optional)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;string&gt;</c> screen_name (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.CreateAllAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names as an asynchronous operation.</para>
            <para>The authenticated user must own the list to be able to add members to it.</para>
            <para>Note that lists can't have more than 500 members, and you are limited to adding up to 100 members to a list at a time with this method.</para>
            <para>Please note that there can be issues with lists that rapidly remove and add memberships.</para>
            <para>Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;long&gt;</c> user_id (optional)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;string&gt;</c> screen_name (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.DeleteAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes the specified member from the list as an asynchronous operation.</para>
            <para>The authenticated user must be the list's owner to remove members from the list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.DeleteAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Removes the specified member from the list as an asynchronous operation.</para>
            <para>The authenticated user must be the list's owner to remove members from the list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.DeleteAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Removes the specified member from the list as an asynchronous operation.</para>
            <para>The authenticated user must be the list's owner to remove members from the list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.DeleteAllAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names as an asynchronous operation.</para>
            <para>The authenticated user must own the list to be able to remove members from it.</para>
            <para>Note that lists can't have more than 500 members, and you are limited to removing up to 100 members to a list at a time with this method.</para>
            <para>Please note that there can be issues with lists that rapidly remove and add memberships.</para>
            <para>Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> / IEnumerable&lt;long&gt; user_id (optional)</para>
            <para>- <c>string</c> / IEnumerable&lt;string&gt; screen_name (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.DeleteAllAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names as an asynchronous operation.</para>
            <para>The authenticated user must own the list to be able to remove members from it.</para>
            <para>Note that lists can't have more than 500 members, and you are limited to removing up to 100 members to a list at a time with this method.</para>
            <para>Please note that there can be issues with lists that rapidly remove and add memberships.</para>
            <para>Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> / IEnumerable&lt;long&gt; user_id (optional)</para>
            <para>- <c>string</c> / IEnumerable&lt;string&gt; screen_name (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.DeleteAllAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names as an asynchronous operation.</para>
            <para>The authenticated user must own the list to be able to remove members from it.</para>
            <para>Note that lists can't have more than 500 members, and you are limited to removing up to 100 members to a list at a time with this method.</para>
            <para>Please note that there can be issues with lists that rapidly remove and add memberships.</para>
            <para>Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> / IEnumerable&lt;long&gt; user_id (optional)</para>
            <para>- <c>string</c> / IEnumerable&lt;string&gt; screen_name (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the members of the specified list.</para>
            <para>Private list members will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_sereen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the members of the specified list.</para>
            <para>Private list members will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_sereen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.List``1(``0)">
            <summary>
            <para>Returns the members of the specified list.</para>
            <para>Private list members will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_sereen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.Enumerate(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumeates the members of the specified list.</para>
            <para>Private list members will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_sereen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.Enumerate(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Enumeates the members of the specified list.</para>
            <para>Private list members will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_sereen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.Enumerate``1(CoreTweet.EnumerateMode,``0)">
            <summary>
            <para>Enumeates the members of the specified list.</para>
            <para>Private list members will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_sereen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> sereen_name (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> sereen_name (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.Show``1(``0)">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> sereen_name (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Add a member to a list.</para>
            <para>The authenticated user must own the list to be able to add members to it.</para>
            <para>Note that lists can't have more than 500 members.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para><para> </para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Add a member to a list.</para>
            <para>The authenticated user must own the list to be able to add members to it.</para>
            <para>Note that lists can't have more than 500 members.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para><para> </para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.Create``1(``0)">
            <summary>
            <para>Add a member to a list.</para>
            <para>The authenticated user must own the list to be able to add members to it.</para>
            <para>Note that lists can't have more than 500 members.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para><para> </para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.CreateAll(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>The authenticated user must own the list to be able to add members to it.</para>
            <para>Note that lists can't have more than 500 members, and you are limited to adding up to 100 members to a list at a time with this method.</para>
            <para>Please note that there can be issues with lists that rapidly remove and add memberships.</para>
            <para>Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;long&gt;</c> user_id (optional)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;string&gt;</c> screen_name (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.CreateAll(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>The authenticated user must own the list to be able to add members to it.</para>
            <para>Note that lists can't have more than 500 members, and you are limited to adding up to 100 members to a list at a time with this method.</para>
            <para>Please note that there can be issues with lists that rapidly remove and add memberships.</para>
            <para>Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;long&gt;</c> user_id (optional)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;string&gt;</c> screen_name (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.CreateAll``1(``0)">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>The authenticated user must own the list to be able to add members to it.</para>
            <para>Note that lists can't have more than 500 members, and you are limited to adding up to 100 members to a list at a time with this method.</para>
            <para>Please note that there can be issues with lists that rapidly remove and add memberships.</para>
            <para>Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;long&gt;</c> user_id (optional)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;string&gt;</c> screen_name (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.Delete(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes the specified member from the list.</para>
            <para>The authenticated user must be the list's owner to remove members from the list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.Delete(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Removes the specified member from the list.</para>
            <para>The authenticated user must be the list's owner to remove members from the list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.Delete``1(``0)">
            <summary>
            <para>Removes the specified member from the list.</para>
            <para>The authenticated user must be the list's owner to remove members from the list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.DeleteAll(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>The authenticated user must own the list to be able to remove members from it.</para>
            <para>Note that lists can't have more than 500 members, and you are limited to removing up to 100 members to a list at a time with this method.</para>
            <para>Please note that there can be issues with lists that rapidly remove and add memberships.</para>
            <para>Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> / IEnumerable&lt;long&gt; user_id (optional)</para>
            <para>- <c>string</c> / IEnumerable&lt;string&gt; screen_name (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.DeleteAll(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>The authenticated user must own the list to be able to remove members from it.</para>
            <para>Note that lists can't have more than 500 members, and you are limited to removing up to 100 members to a list at a time with this method.</para>
            <para>Please note that there can be issues with lists that rapidly remove and add memberships.</para>
            <para>Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> / IEnumerable&lt;long&gt; user_id (optional)</para>
            <para>- <c>string</c> / IEnumerable&lt;string&gt; screen_name (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Members.DeleteAll``1(``0)">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>The authenticated user must own the list to be able to remove members from it.</para>
            <para>Note that lists can't have more than 500 members, and you are limited to removing up to 100 members to a list at a time with this method.</para>
            <para>Please note that there can be issues with lists that rapidly remove and add memberships.</para>
            <para>Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> / IEnumerable&lt;long&gt; user_id (optional)</para>
            <para>- <c>string</c> / IEnumerable&lt;string&gt; screen_name (optional)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Subscribers">
            <summary>
            Provides a set of methods for the wrapper of GET/POST lists/subscribers.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list as an asynchronous operation.</para>
            <para>Returns the user if they are subscriber.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list as an asynchronous operation.</para>
            <para>Returns the user if they are subscriber.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.ShowAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list as an asynchronous operation.</para>
            <para>Returns the user if they are subscriber.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Subscribes the authenticated user to the specified list as an asynchronous operation.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Subscribes the authenticated user to the specified list as an asynchronous operation.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.CreateAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Subscribes the authenticated user to the specified list as an asynchronous operation.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.DeleteAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list as an asynchronous operation.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.DeleteAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list as an asynchronous operation.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.DeleteAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list as an asynchronous operation.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the list.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list.</para>
            <para>Returns the user if they are subscriber.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list.</para>
            <para>Returns the user if they are subscriber.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.Show``1(``0)">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list.</para>
            <para>Returns the user if they are subscriber.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.Create``1(``0)">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.Delete(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.Delete(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.Delete``1(``0)">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list.</para>
            <para>Note: Either a list_id or a slug is required.</para>
            <para>If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> list_id (required)</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> owner_screen_name (optional)</para>
            <para>- <c>long</c> owner_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="T:CoreTweet.Rest.MutesUsers">
            <summary>
            Provides a set of methods for the wrapper of GET/POST mutes/users.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.IdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.IdsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.IdsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.ListAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user as an asynchronous operation.</para>
            <para>Returns the muted user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user as an asynchronous operation.</para>
            <para>Returns the muted user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.CreateAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user as an asynchronous operation.</para>
            <para>Returns the muted user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user as an asynchronous operation.</para>
            <para>Returns the unmuted user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user as an asynchronous operation.</para>
            <para>Returns the unmuted user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.DestroyAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user as an asynchronous operation.</para>
            <para>Returns the unmuted user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Ids(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Ids(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Ids``1(``0)">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.EnumerateIds(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates numeric user ids the authenticating user has muted.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.EnumerateIds(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Enumerates numeric user ids the authenticating user has muted.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.EnumerateIds``1(CoreTweet.EnumerateMode,``0)">
            <summary>
            <para>Enumerates numeric user ids the authenticating user has muted.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.List``1(``0)">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.EnumerateList(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates user objects the authenticating user has muted.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.EnumerateList(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Enumerates user objects the authenticating user has muted.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.EnumerateList``1(CoreTweet.EnumerateMode,``0)">
            <summary>
            <para>Enumerates user objects the authenticating user has muted.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Returns the muted user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Returns the muted user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Create``1(``0)">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Returns the muted user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Returns the unmuted user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Returns the unmuted user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Destroy``1(``0)">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Returns the unmuted user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Mutes">
            <summary>
            Provides a set of methods for the wrapper of GET/POST mutes.
            </summary>
        </member>
        <member name="P:CoreTweet.Rest.Mutes.Users">
            <summary>
            Gets the wrapper of mutes/users.
            </summary>
        </member>
        <member name="T:CoreTweet.Rest.SavedSearches">
            <summary>
            Provides a set of methods for the wrapper of GET/POST saved_searches.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the authenticated user's saved search queries as an asynchronous operation.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the saved searches.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the authenticated user's saved search queries as an asynchronous operation.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the saved searches.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.ListAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the authenticated user's saved search queries as an asynchronous operation.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the saved searches.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Retrieve the information for the saved search represented by the given id as an asynchronous operation.</para>
            <para>The authenticating user must be the owner of saved search ID being requested.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the saved search.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Retrieve the information for the saved search represented by the given id as an asynchronous operation.</para>
            <para>The authenticating user must be the owner of saved search ID being requested.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the saved search.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.ShowAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Retrieve the information for the saved search represented by the given id as an asynchronous operation.</para>
            <para>The authenticating user must be the owner of saved search ID being requested.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the saved search.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Create a new saved search for the authenticated user as an asynchronous operation.</para>
            <para>A user may only have 25 saved searches.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> query (required)</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the saved search.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Create a new saved search for the authenticated user as an asynchronous operation.</para>
            <para>A user may only have 25 saved searches.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> query (required)</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the saved search.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.CreateAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Create a new saved search for the authenticated user as an asynchronous operation.</para>
            <para>A user may only have 25 saved searches.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> query (required)</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the saved search.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys a saved search for the authenticating user as an asynchronous operation.</para>
            <para>The authenticating user must be the owner of saved search id being destroyed.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the saved search.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Destroys a saved search for the authenticating user as an asynchronous operation.</para>
            <para>The authenticating user must be the owner of saved search id being destroyed.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the saved search.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.DestroyAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Destroys a saved search for the authenticating user as an asynchronous operation.</para>
            <para>The authenticating user must be the owner of saved search id being destroyed.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the saved search.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the authenticated user's saved search queries.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <returns>The saved searches.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the authenticated user's saved search queries.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <returns>The saved searches.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.List``1(``0)">
            <summary>
            <para>Returns the authenticated user's saved search queries.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <returns>The saved searches.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Retrieve the information for the saved search represented by the given id.</para>
            <para>The authenticating user must be the owner of saved search ID being requested.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Retrieve the information for the saved search represented by the given id.</para>
            <para>The authenticating user must be the owner of saved search ID being requested.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Show``1(``0)">
            <summary>
            <para>Retrieve the information for the saved search represented by the given id.</para>
            <para>The authenticating user must be the owner of saved search ID being requested.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Create a new saved search for the authenticated user.</para>
            <para>A user may only have 25 saved searches.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> query (required)</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Create a new saved search for the authenticated user.</para>
            <para>A user may only have 25 saved searches.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> query (required)</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Create``1(``0)">
            <summary>
            <para>Create a new saved search for the authenticated user.</para>
            <para>A user may only have 25 saved searches.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> query (required)</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys a saved search for the authenticating user.</para>
            <para>The authenticating user must be the owner of saved search id being destroyed.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Destroys a saved search for the authenticating user.</para>
            <para>The authenticating user must be the owner of saved search id being destroyed.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Destroy``1(``0)">
            <summary>
            <para>Destroys a saved search for the authenticating user.</para>
            <para>The authenticating user must be the owner of saved search id being destroyed.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The Parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Search">
            <summary>
            Provides a set of methods for the wrapper of GET search.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Search.TweetsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query as an asynchronous operation.</para>
            <para>Please note that Twitter's search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets.</para>
            <para>Not all Tweets will be indexed or made available via the search interface.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>string</c> geocode (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> locale (optional)</para>
            <para>- <c>string</c> result_type (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> until (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Search.TweetsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query as an asynchronous operation.</para>
            <para>Please note that Twitter's search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets.</para>
            <para>Not all Tweets will be indexed or made available via the search interface.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>string</c> geocode (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> locale (optional)</para>
            <para>- <c>string</c> result_type (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> until (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Search.TweetsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query as an asynchronous operation.</para>
            <para>Please note that Twitter's search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets.</para>
            <para>Not all Tweets will be indexed or made available via the search interface.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>string</c> geocode (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> locale (optional)</para>
            <para>- <c>string</c> result_type (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> until (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Search.Tweets(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Please note that Twitter's search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets.</para>
            <para>Not all Tweets will be indexed or made available via the search interface.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>string</c> geocode (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> locale (optional)</para>
            <para>- <c>string</c> result_type (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> until (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Search.Tweets(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Please note that Twitter's search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets.</para>
            <para>Not all Tweets will be indexed or made available via the search interface.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>string</c> geocode (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> locale (optional)</para>
            <para>- <c>string</c> result_type (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> until (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Search.Tweets``1(``0)">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Please note that Twitter's search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets.</para>
            <para>Not all Tweets will be indexed or made available via the search interface.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>string</c> geocode (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> locale (optional)</para>
            <para>- <c>string</c> result_type (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> until (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Statuses">
            <summary>
            Provides a set of methods for the wrapper of GET/POST statuses.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.MentionsTimelineAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user as an asynchronous operation.</para>
            <para>The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.</para>
            <para>This method can only return up to 800 tweets.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.MentionsTimelineAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user as an asynchronous operation.</para>
            <para>The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.</para>
            <para>This method can only return up to 800 tweets.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.MentionsTimelineAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user as an asynchronous operation.</para>
            <para>The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.</para>
            <para>This method can only return up to 800 tweets.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimelineAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters as an asynchronous operation.</para>
            <para>User timelines belonging to protected users may only be requested when the authenticated user either "owns" the timeline or is an approved follower of the owner.</para>
            <para>The timeline returned is the equivalent of the one seen when you view a user's profile on twitter.com.</para>
            <para>This method can only return up to 3,200 of a user's most recent Tweets.</para>
            <para>Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is set to false when requesting this resource.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>int</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimelineAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters as an asynchronous operation.</para>
            <para>User timelines belonging to protected users may only be requested when the authenticated user either "owns" the timeline or is an approved follower of the owner.</para>
            <para>The timeline returned is the equivalent of the one seen when you view a user's profile on twitter.com.</para>
            <para>This method can only return up to 3,200 of a user's most recent Tweets.</para>
            <para>Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is set to false when requesting this resource.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>int</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimelineAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters as an asynchronous operation.</para>
            <para>User timelines belonging to protected users may only be requested when the authenticated user either "owns" the timeline or is an approved follower of the owner.</para>
            <para>The timeline returned is the equivalent of the one seen when you view a user's profile on twitter.com.</para>
            <para>This method can only return up to 3,200 of a user's most recent Tweets.</para>
            <para>Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is set to false when requesting this resource.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>int</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.HomeTimelineAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow as an asynchronous operation.</para>
            <para>The home timeline is central to how most users interact with the Twitter service.</para>
            <para>Up to 800 Tweets are obtainable on the home timeline.</para>
            <para>It is more volatile for users that follow many users or follow users who tweet frequently.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.HomeTimelineAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow as an asynchronous operation.</para>
            <para>The home timeline is central to how most users interact with the Twitter service.</para>
            <para>Up to 800 Tweets are obtainable on the home timeline.</para>
            <para>It is more volatile for users that follow many users or follow users who tweet frequently.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.HomeTimelineAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow as an asynchronous operation.</para>
            <para>The home timeline is central to how most users interact with the Twitter service.</para>
            <para>Up to 800 Tweets are obtainable on the home timeline.</para>
            <para>It is more volatile for users that follow many users or follow users who tweet frequently.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsOfMeAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others as an asynchronous operation.</para>
            <para>This timeline is a subset of the user's GET statuses/user_timeline.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsOfMeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others as an asynchronous operation.</para>
            <para>This timeline is a subset of the user's GET statuses/user_timeline.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsOfMeAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others as an asynchronous operation.</para>
            <para>This timeline is a subset of the user's GET statuses/user_timeline.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.OembedAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sitesas an asynchronous operation.</para>
            <para>While this endpoint allows a bit of customization for the final appearance of the embedded Tweet, be aware that the appearance of the rendered Tweet may change over time to be consistent with Twitter's Display Requirements.</para>
            <para>Do not rely on any class or id parameters to stay constant in the returned markup.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>int</c> maxwidth (optional)</para>
            <para>- <c>bool</c> hide_media (optional)</para>
            <para>- <c>bool</c> hide_thread (optional)</para>
            <para>- <c>bool</c> omit_script (optional)</para>
            <para>- <c>string</c> align (optional)</para>
            <para>- <c>string</c> related (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the HTML code and more.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.OembedAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites as an asynchronous operation.</para>
            <para>While this endpoint allows a bit of customization for the final appearance of the embedded Tweet, be aware that the appearance of the rendered Tweet may change over time to be consistent with Twitter's Display Requirements.</para>
            <para>Do not rely on any class or id parameters to stay constant in the returned markup.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>int</c> maxwidth (optional)</para>
            <para>- <c>bool</c> hide_media (optional)</para>
            <para>- <c>bool</c> hide_thread (optional)</para>
            <para>- <c>bool</c> omit_script (optional)</para>
            <para>- <c>string</c> align (optional)</para>
            <para>- <c>string</c> related (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the HTML code and more.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.OembedAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites as an asynchronous operation.</para>
            <para>While this endpoint allows a bit of customization for the final appearance of the embedded Tweet, be aware that the appearance of the rendered Tweet may change over time to be consistent with Twitter's Display Requirements.</para>
            <para>Do not rely on any class or id parameters to stay constant in the returned markup.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>int</c> maxwidth (optional)</para>
            <para>- <c>bool</c> hide_media (optional)</para>
            <para>- <c>bool</c> hide_thread (optional)</para>
            <para>- <c>bool</c> omit_script (optional)</para>
            <para>- <c>string</c> align (optional)</para>
            <para>- <c>string</c> related (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the HTML code and more.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a single Tweet, specified by the id parameter as an asynchronous operation.</para>
            <para>The Tweet's author will also be embedded within the tweet.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a single Tweet, specified by the id parameter as an asynchronous operation.</para>
            <para>The Tweet's author will also be embedded within the tweet.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.ShowAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a single Tweet, specified by the id parameter as an asynchronous operation.</para>
            <para>The Tweet's author will also be embedded within the tweet.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns up to 100 of the first retweets of a given tweet as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns up to 100 of the first retweets of a given tweet as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns up to 100 of the first retweets of a given tweet as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.LookupAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter as an asynchronous operation.</para>
            <para>This method is especially useful to get the details (hydrate) a collection of Tweet IDs.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / <c>IEnumerbale&lt;long&gt;</c> id (required)</para>
            <para><example>Example Values: 20, 432656548536401920</example></para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.LookupAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter as an asynchronous operation.</para>
            <para>This method is especially useful to get the details (hydrate) a collection of Tweet IDs.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / <c>IEnumerbale&lt;long&gt;</c> id (required)</para>
            <para><example>Example Values: 20, 432656548536401920</example></para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.LookupAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter as an asynchronous operation.</para>
            <para>This method is especially useful to get the details (hydrate) a collection of Tweet IDs.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / <c>IEnumerbale&lt;long&gt;</c> id (required)</para>
            <para><example>Example Values: 20, 432656548536401920</example></para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the statuses.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetersIdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter as an asynchronous operation.</para>
            <para>This method offers similar data to GET statuses/retweets/:id and replaces API v1's GET statuses/:id/retweeted_by/ids method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>Don't use stringify_ids</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetersIdsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter as an asynchronous operation.</para>
            <para>This method offers similar data to GET statuses/retweets/:id and replaces API v1's GET statuses/:id/retweeted_by/ids method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>Don't use stringify_ids</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetersIdsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter as an asynchronous operation.</para>
            <para>This method offers similar data to GET statuses/retweets/:id and replaces API v1's GET statuses/:id/retweeted_by/ids method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>Don't use stringify_ids</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the IDs.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user's current status, also known as tweeting as an asynchronous operation.</para>
            <para>To upload an image to accompany the tweet, use POST statuses/update_with_media.</para>
            <para>For each parameters attempt, the parameters text is compared with the authenticating user's recent tweets.</para>
            <para>Any attempt that would result in duplication will be blocked, resulting in a 403 error.</para>
            <para>Therefore, a user cannot submit the same status twice in a row.</para>
            <para>While not rate limited by the API a user is limited in the number of tweets they can create at a time.</para>
            <para>If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the updated status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user's current status, also known as tweeting as an asynchronous operation.</para>
            <para>To upload an image to accompany the tweet, use POST statuses/update_with_media.</para>
            <para>For each parameters attempt, the parameters text is compared with the authenticating user's recent tweets.</para>
            <para>Any attempt that would result in duplication will be blocked, resulting in a 403 error.</para>
            <para>Therefore, a user cannot submit the same status twice in a row.</para>
            <para>While not rate limited by the API a user is limited in the number of tweets they can create at a time.</para>
            <para>If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the updated status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user's current status, also known as tweeting as an asynchronous operation.</para>
            <para>To upload an image to accompany the tweet, use POST statuses/update_with_media.</para>
            <para>For each parameters attempt, the parameters text is compared with the authenticating user's recent tweets.</para>
            <para>Any attempt that would result in duplication will be blocked, resulting in a 403 error.</para>
            <para>Therefore, a user cannot submit the same status twice in a row.</para>
            <para>While not rate limited by the API a user is limited in the number of tweets they can create at a time.</para>
            <para>If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the updated status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMediaAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user's current status, uploading an image as an asynchronous operation.</para>
            <para>For each parameters attempt, the parameters text is compared with the authenticating user's recent tweets.</para>
            <para>Any attempt that would result in duplication will be blocked, resulting in a 403 error.</para>
            <para>Therefore, a user cannot submit the same status twice in a row.</para>
            <para>While not rate limited by the API a user is limited in the number of tweets they can create at a time.</para>
            <para>If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> media (required)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the updated status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMediaAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user's current status, uploading an image as an asynchronous operation.</para>
            <para>For each parameters attempt, the parameters text is compared with the authenticating user's recent tweets.</para>
            <para>Any attempt that would result in duplication will be blocked, resulting in a 403 error.</para>
            <para>Therefore, a user cannot submit the same status twice in a row.</para>
            <para>While not rate limited by the API a user is limited in the number of tweets they can create at a time.</para>
            <para>If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> media (required)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the updated status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMediaAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user's current status, uploading an image as an asynchronous operation.</para>
            <para>For each parameters attempt, the parameters text is compared with the authenticating user's recent tweets.</para>
            <para>Any attempt that would result in duplication will be blocked, resulting in a 403 error.</para>
            <para>Therefore, a user cannot submit the same status twice in a row.</para>
            <para>While not rate limited by the API a user is limited in the number of tweets they can create at a time.</para>
            <para>If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> media (required)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the updated status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys the status specified by the required ID parameter as an asynchronous operation.</para>
            <para>The authenticating user must be the author of the specified status.</para>
            <para>Returns the destroyed status if successful.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the destroied status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Destroys the status specified by the required ID parameter as an asynchronous operation.</para>
            <para>The authenticating user must be the author of the specified status.</para>
            <para>Returns the destroyed status if successful.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the destroied status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.DestroyAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Destroys the status specified by the required ID parameter as an asynchronous operation.</para>
            <para>The authenticating user must be the author of the specified status.</para>
            <para>Returns the destroyed status if successful.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the destroied status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Retweets a tweet. Returns the original tweet with retweet details embedded as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the retweeted status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Retweets a tweet. Returns the original tweet with retweet details embedded as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the retweeted status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Retweets a tweet. Returns the original tweet with retweet details embedded as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the retweeted status.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.MentionsTimeline(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user.</para>
            <para>The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.</para>
            <para>This method can only return up to 800 tweets.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.MentionsTimeline(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user.</para>
            <para>The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.</para>
            <para>This method can only return up to 800 tweets.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.MentionsTimeline``1(``0)">
            <summary>
            <para>Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user.</para>
            <para>The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.</para>
            <para>This method can only return up to 800 tweets.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimeline(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
            <para>User timelines belonging to protected users may only be requested when the authenticated user either "owns" the timeline or is an approved follower of the owner.</para>
            <para>The timeline returned is the equivalent of the one seen when you view a user's profile on twitter.com.</para>
            <para>This method can only return up to 3,200 of a user's most recent Tweets.</para>
            <para>Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is set to false when requesting this resource.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>int</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimeline(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
            <para>User timelines belonging to protected users may only be requested when the authenticated user either "owns" the timeline or is an approved follower of the owner.</para>
            <para>The timeline returned is the equivalent of the one seen when you view a user's profile on twitter.com.</para>
            <para>This method can only return up to 3,200 of a user's most recent Tweets.</para>
            <para>Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is set to false when requesting this resource.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>int</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimeline``1(``0)">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
            <para>User timelines belonging to protected users may only be requested when the authenticated user either "owns" the timeline or is an approved follower of the owner.</para>
            <para>The timeline returned is the equivalent of the one seen when you view a user's profile on twitter.com.</para>
            <para>This method can only return up to 3,200 of a user's most recent Tweets.</para>
            <para>Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is set to false when requesting this resource.</para>
            <para>Avaliable parameters: </para>
            <para>- <c>int</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.HomeTimeline(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow.</para>
            <para>The home timeline is central to how most users interact with the Twitter service.</para>
            <para>Up to 800 Tweets are obtainable on the home timeline.</para>
            <para>It is more volatile for users that follow many users or follow users who tweet frequently.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.HomeTimeline(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow.</para>
            <para>The home timeline is central to how most users interact with the Twitter service.</para>
            <para>Up to 800 Tweets are obtainable on the home timeline.</para>
            <para>It is more volatile for users that follow many users or follow users who tweet frequently.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.HomeTimeline``1(``0)">
            <summary>
            <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow.</para>
            <para>The home timeline is central to how most users interact with the Twitter service.</para>
            <para>Up to 800 Tweets are obtainable on the home timeline.</para>
            <para>It is more volatile for users that follow many users or follow users who tweet frequently.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsOfMe(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others.</para>
            <para>This timeline is a subset of the user's GET statuses/user_timeline.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsOfMe(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others.</para>
            <para>This timeline is a subset of the user's GET statuses/user_timeline.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsOfMe``1(``0)">
            <summary>
            <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others.</para>
            <para>This timeline is a subset of the user's GET statuses/user_timeline.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> since_id(optional)</para>
            <para>- <c>int</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Oembed(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
            <para>While this endpoint allows a bit of customization for the final appearance of the embedded Tweet, be aware that the appearance of the rendered Tweet may change over time to be consistent with Twitter's Display Requirements.</para>
            <para>Do not rely on any class or id parameters to stay constant in the returned markup.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>int</c> maxwidth (optional)</para>
            <para>- <c>bool</c> hide_media (optional)</para>
            <para>- <c>bool</c> hide_thread (optional)</para>
            <para>- <c>bool</c> omit_script (optional)</para>
            <para>- <c>string</c> align (optional)</para>
            <para>- <c>string</c> related (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The HTML code and more.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Oembed(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
            <para>While this endpoint allows a bit of customization for the final appearance of the embedded Tweet, be aware that the appearance of the rendered Tweet may change over time to be consistent with Twitter's Display Requirements.</para>
            <para>Do not rely on any class or id parameters to stay constant in the returned markup.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>int</c> maxwidth (optional)</para>
            <para>- <c>bool</c> hide_media (optional)</para>
            <para>- <c>bool</c> hide_thread (optional)</para>
            <para>- <c>bool</c> omit_script (optional)</para>
            <para>- <c>string</c> align (optional)</para>
            <para>- <c>string</c> related (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The HTML code and more.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Oembed``1(``0)">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
            <para>While this endpoint allows a bit of customization for the final appearance of the embedded Tweet, be aware that the appearance of the rendered Tweet may change over time to be consistent with Twitter's Display Requirements.</para>
            <para>Do not rely on any class or id parameters to stay constant in the returned markup.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>int</c> maxwidth (optional)</para>
            <para>- <c>bool</c> hide_media (optional)</para>
            <para>- <c>bool</c> hide_thread (optional)</para>
            <para>- <c>bool</c> omit_script (optional)</para>
            <para>- <c>string</c> align (optional)</para>
            <para>- <c>string</c> related (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The HTML code and more.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a single Tweet, specified by the id parameter.</para>
            <para>The Tweet's author will also be embedded within the tweet.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a single Tweet, specified by the id parameter.</para>
            <para>The Tweet's author will also be embedded within the tweet.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Show``1(``0)">
            <summary>
            <para>Returns a single Tweet, specified by the id parameter.</para>
            <para>The Tweet's author will also be embedded within the tweet.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Retweets(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns up to 100 of the first retweets of a given tweet.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Retweets(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns up to 100 of the first retweets of a given tweet.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Retweets``1(``0)">
            <summary>
            <para>Returns up to 100 of the first retweets of a given tweet.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Lookup(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            <para>This method is especially useful to get the details (hydrate) a collection of Tweet IDs.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / <c>IEnumerbale&lt;long&gt;</c> id (required)</para>
            <para><example>Example Values: 20, 432656548536401920</example></para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Lookup(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            <para>This method is especially useful to get the details (hydrate) a collection of Tweet IDs.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / <c>IEnumerbale&lt;long&gt;</c> id (required)</para>
            <para><example>Example Values: 20, 432656548536401920</example></para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Lookup``1(``0)">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            <para>This method is especially useful to get the details (hydrate) a collection of Tweet IDs.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / <c>IEnumerbale&lt;long&gt;</c> id (required)</para>
            <para><example>Example Values: 20, 432656548536401920</example></para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetersIds(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            <para>This method offers similar data to GET statuses/retweets/:id and replaces API v1's GET statuses/:id/retweeted_by/ids method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>Don't use stringify_ids</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetersIds(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            <para>This method offers similar data to GET statuses/retweets/:id and replaces API v1's GET statuses/:id/retweeted_by/ids method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>Don't use stringify_ids</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetersIds``1(``0)">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            <para>This method offers similar data to GET statuses/retweets/:id and replaces API v1's GET statuses/:id/retweeted_by/ids method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>Don't use stringify_ids</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.EnumerateRetweetersIds(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            <para>This method offers similar data to GET statuses/retweets/:id and replaces API v1's GET statuses/:id/retweeted_by/ids method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>Don't use stringify_ids</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.EnumerateRetweetersIds(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Enumerates a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            <para>This method offers similar data to GET statuses/retweets/:id and replaces API v1's GET statuses/:id/retweeted_by/ids method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>Don't use stringify_ids</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.EnumerateRetweetersIds``1(CoreTweet.EnumerateMode,``0)">
            <summary>
            <para>Enumerates a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            <para>This method offers similar data to GET statuses/retweets/:id and replaces API v1's GET statuses/:id/retweeted_by/ids method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>Don't use stringify_ids</para>
            </summary>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Update(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user's current status, also known as tweeting.</para>
            <para>To upload an image to accompany the tweet, use POST statuses/update_with_media.</para>
            <para>For each parameters attempt, the parameters text is compared with the authenticating user's recent tweets.</para>
            <para>Any attempt that would result in duplication will be blocked, resulting in a 403 error.</para>
            <para>Therefore, a user cannot submit the same status twice in a row.</para>
            <para>While not rate limited by the API a user is limited in the number of tweets they can create at a time.</para>
            <para>If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Update(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Updates the authenticating user's current status, also known as tweeting.</para>
            <para>To upload an image to accompany the tweet, use POST statuses/update_with_media.</para>
            <para>For each parameters attempt, the parameters text is compared with the authenticating user's recent tweets.</para>
            <para>Any attempt that would result in duplication will be blocked, resulting in a 403 error.</para>
            <para>Therefore, a user cannot submit the same status twice in a row.</para>
            <para>While not rate limited by the API a user is limited in the number of tweets they can create at a time.</para>
            <para>If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Update``1(``0)">
            <summary>
            <para>Updates the authenticating user's current status, also known as tweeting.</para>
            <para>To upload an image to accompany the tweet, use POST statuses/update_with_media.</para>
            <para>For each parameters attempt, the parameters text is compared with the authenticating user's recent tweets.</para>
            <para>Any attempt that would result in duplication will be blocked, resulting in a 403 error.</para>
            <para>Therefore, a user cannot submit the same status twice in a row.</para>
            <para>While not rate limited by the API a user is limited in the number of tweets they can create at a time.</para>
            <para>If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMedia(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user's current status, uploading an image.</para>
            <para>For each parameters attempt, the parameters text is compared with the authenticating user's recent tweets.</para>
            <para>Any attempt that would result in duplication will be blocked, resulting in a 403 error.</para>
            <para>Therefore, a user cannot submit the same status twice in a row.</para>
            <para>While not rate limited by the API a user is limited in the number of tweets they can create at a time.</para>
            <para>If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> media (required)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMedia(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Updates the authenticating user's current status, uploading an image.</para>
            <para>For each parameters attempt, the parameters text is compared with the authenticating user's recent tweets.</para>
            <para>Any attempt that would result in duplication will be blocked, resulting in a 403 error.</para>
            <para>Therefore, a user cannot submit the same status twice in a row.</para>
            <para>While not rate limited by the API a user is limited in the number of tweets they can create at a time.</para>
            <para>If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> media (required)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMedia``1(``0)">
            <summary>
            <para>Updates the authenticating user's current status, uploading an image.</para>
            <para>For each parameters attempt, the parameters text is compared with the authenticating user's recent tweets.</para>
            <para>Any attempt that would result in duplication will be blocked, resulting in a 403 error.</para>
            <para>Therefore, a user cannot submit the same status twice in a row.</para>
            <para>While not rate limited by the API a user is limited in the number of tweets they can create at a time.</para>
            <para>If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / <c>FileInfo</c> media (required)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys the status specified by the required ID parameter.</para>
            <para>The authenticating user must be the author of the specified status.</para>
            <para>Returns the destroyed status if successful.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroied status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Destroys the status specified by the required ID parameter.</para>
            <para>The authenticating user must be the author of the specified status.</para>
            <para>Returns the destroyed status if successful.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroied status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Destroy``1(``0)">
            <summary>
            <para>Destroys the status specified by the required ID parameter.</para>
            <para>The authenticating user must be the author of the specified status.</para>
            <para>Returns the destroyed status if successful.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroied status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Retweet(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Retweets a tweet. Returns the original tweet with retweet details embedded.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The retweeted status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Retweet(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Retweets a tweet. Returns the original tweet with retweet details embedded.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The retweeted status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Retweet``1(``0)">
            <summary>
            <para>Retweets a tweet. Returns the original tweet with retweet details embedded.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The retweeted status.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Trends">
            <summary>
            Provides a set of methods for the wrapper of GET trends.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Trends.AvaliableAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for as an asynchronous operation.</para>
            <para>The response is an array of "locations" that encode the location's id and some other human-readable information such as a canonical name and country the location belongs in.</para>
            <para>A id is a Yahoo! Where On Earth ID.</para>
            <para>See also: http://developer.yahoo.com/geo/geoplanet/</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the locations.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.AvaliableAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for as an asynchronous operation.</para>
            <para>The response is an array of "locations" that encode the location's id and some other human-readable information such as a canonical name and country the location belongs in.</para>
            <para>A id is a Yahoo! Where On Earth ID.</para>
            <para>See also: http://developer.yahoo.com/geo/geoplanet/</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the locations.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.AvaliableAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for as an asynchronous operation.</para>
            <para>The response is an array of "locations" that encode the location's id and some other human-readable information such as a canonical name and country the location belongs in.</para>
            <para>A id is a Yahoo! Where On Earth ID.</para>
            <para>See also: http://developer.yahoo.com/geo/geoplanet/</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the locations.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.ClosestAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for, closest to a specified location as an asynchronous operation.</para>
            <para>The response is an array of "locations" that encode the location's ID and some other human-readable information such as a canonical name and country the location belongs in.</para>
            <para>A id is a Yahoo! Where On Earth ID.</para>
            <para>See also: http://developer.yahoo.com/geo/geoplanet/</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the locations.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.ClosestAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for, closest to a specified location as an asynchronous operation.</para>
            <para>The response is an array of "locations" that encode the location's ID and some other human-readable information such as a canonical name and country the location belongs in.</para>
            <para>A id is a Yahoo! Where On Earth ID.</para>
            <para>See also: http://developer.yahoo.com/geo/geoplanet/</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the locations.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.ClosestAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for, closest to a specified location as an asynchronous operation.</para>
            <para>The response is an array of "locations" that encode the location's ID and some other human-readable information such as a canonical name and country the location belongs in.</para>
            <para>A id is a Yahoo! Where On Earth ID.</para>
            <para>See also: http://developer.yahoo.com/geo/geoplanet/</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the locations.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.PlaceAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the top 10 trending topics for a specific id, if trending information is available for it as an asynchronous operation.</para>
            <para>The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL.</para>
            <para>This information is cached for 5 minutes.</para>
            <para>Requesting more frequently than that will not return any more data, and will count against your rate limit usage.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the queries.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.PlaceAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the top 10 trending topics for a specific id, if trending information is available for it as an asynchronous operation.</para>
            <para>The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL.</para>
            <para>This information is cached for 5 minutes.</para>
            <para>Requesting more frequently than that will not return any more data, and will count against your rate limit usage.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the queries.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.PlaceAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the top 10 trending topics for a specific id, if trending information is available for it as an asynchronous operation.</para>
            <para>The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL.</para>
            <para>This information is cached for 5 minutes.</para>
            <para>Requesting more frequently than that will not return any more data, and will count against your rate limit usage.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the queries.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Avaliable(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for.</para>
            <para>The response is an array of "locations" that encode the location's id and some other human-readable information such as a canonical name and country the location belongs in.</para>
            <para>A id is a Yahoo! Where On Earth ID.</para>
            <para>See also: http://developer.yahoo.com/geo/geoplanet/</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Avaliable(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for.</para>
            <para>The response is an array of "locations" that encode the location's id and some other human-readable information such as a canonical name and country the location belongs in.</para>
            <para>A id is a Yahoo! Where On Earth ID.</para>
            <para>See also: http://developer.yahoo.com/geo/geoplanet/</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Avaliable``1(``0)">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for.</para>
            <para>The response is an array of "locations" that encode the location's id and some other human-readable information such as a canonical name and country the location belongs in.</para>
            <para>A id is a Yahoo! Where On Earth ID.</para>
            <para>See also: http://developer.yahoo.com/geo/geoplanet/</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Closest(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
            <para>The response is an array of "locations" that encode the location's ID and some other human-readable information such as a canonical name and country the location belongs in.</para>
            <para>A id is a Yahoo! Where On Earth ID.</para>
            <para>See also: http://developer.yahoo.com/geo/geoplanet/</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Closest(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
            <para>The response is an array of "locations" that encode the location's ID and some other human-readable information such as a canonical name and country the location belongs in.</para>
            <para>A id is a Yahoo! Where On Earth ID.</para>
            <para>See also: http://developer.yahoo.com/geo/geoplanet/</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Closest``1(``0)">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
            <para>The response is an array of "locations" that encode the location's ID and some other human-readable information such as a canonical name and country the location belongs in.</para>
            <para>A id is a Yahoo! Where On Earth ID.</para>
            <para>See also: http://developer.yahoo.com/geo/geoplanet/</para>
            <para>Avaliable parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Place(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
            <para>The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL.</para>
            <para>This information is cached for 5 minutes.</para>
            <para>Requesting more frequently than that will not return any more data, and will count against your rate limit usage.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The queries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Place(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
            <para>The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL.</para>
            <para>This information is cached for 5 minutes.</para>
            <para>Requesting more frequently than that will not return any more data, and will count against your rate limit usage.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The queries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Place``1(``0)">
            <summary>
            <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
            <para>The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL.</para>
            <para>This information is cached for 5 minutes.</para>
            <para>Requesting more frequently than that will not return any more data, and will count against your rate limit usage.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The queries.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Media">
            <summary>
            Provides a set of methods for the wrapper of POST media.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Uploads an image and gets the media_id attached with a status as an asynchronous operation.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / FileInfo media (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the result for the uploaded media.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Uploads an image and gets the media_id attached with a status as an asynchronous operation.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / FileInfo media (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the result for the uploaded media.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Uploads an image and gets the media_id attached with a status as an asynchronous operation.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / FileInfo media (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the result for the uploaded media.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.Upload(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Uploads an image and gets the media_id attached with a status.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / FileInfo media (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.Upload(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Uploads an image and gets the media_id attached with a status.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / FileInfo media (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.Upload``1(``0)">
            <summary>
            <para>Uploads an image and gets the media_id attached with a status.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> / <c>IEnumerable&lt;byte&gt;</c> / FileInfo media (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Users">
            <summary>
            Provides a set of methods for the wrapper of GET/POST users.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributeesAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to as an asynchronous operation.</para>
            <para>Note: A user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributeesAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to as an asynchronous operation.</para>
            <para>Note: A user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributeesAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to as an asynchronous operation.</para>
            <para>Note: A user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributorsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account as an asynchronous operation.</para>
            <para>Note: A user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributorsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account as an asynchronous operation.</para>
            <para>Note: A user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributorsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account as an asynchronous operation.</para>
            <para>Note: A user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.LookupAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters as an asynchronous operation.</para>
            <para>This method is especially useful when used in conjunction with collections of user IDs returned from GET friends/ids and GET followers/ids.</para>
            <para>GET users/show is used to retrieve a single user object.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;long&gt;</c> user_id (optional)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;string&gt;</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.LookupAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters as an asynchronous operation.</para>
            <para>This method is especially useful when used in conjunction with collections of user IDs returned from GET friends/ids and GET followers/ids.</para>
            <para>GET users/show is used to retrieve a single user object.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;long&gt;</c> user_id (optional)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;string&gt;</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.LookupAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters as an asynchronous operation.</para>
            <para>This method is especially useful when used in conjunction with collections of user IDs returned from GET friends/ids and GET followers/ids.</para>
            <para>GET users/show is used to retrieve a single user object.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;long&gt;</c> user_id (optional)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;string&gt;</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ProfileBannerAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the size of the specified user's profile banner as an asynchronous operation.</para>
            <para>If the user has not uploaded a profile banner, a HTTP 404 will be served instead.</para>
            <para>This method can be used instead of string manipulation on the profile_banner_url returned in user objects as described in User Profile Images and Banners.</para>
            <para>Note: Always specify either an user_id or screen_name when requesting this method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the sizes.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ProfileBannerAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the size of the specified user's profile banner as an asynchronous operation.</para>
            <para>If the user has not uploaded a profile banner, a HTTP 404 will be served instead.</para>
            <para>This method can be used instead of string manipulation on the profile_banner_url returned in user objects as described in User Profile Images and Banners.</para>
            <para>Note: Always specify either an user_id or screen_name when requesting this method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the sizes.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ProfileBannerAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the size of the specified user's profile banner as an asynchronous operation.</para>
            <para>If the user has not uploaded a profile banner, a HTTP 404 will be served instead.</para>
            <para>This method can be used instead of string manipulation on the profile_banner_url returned in user objects as described in User Profile Images and Banners.</para>
            <para>Note: Always specify either an user_id or screen_name when requesting this method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the sizes.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SearchAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Provides a simple, relevance-based search interface to public user accounts on Twitter as an asynchronous operation.</para>
            <para>Try querying by topical interest, full name, company name, location, or other criteria.</para>
            <para>Exact match searches are not supported.</para>
            <para>Only the first 1,000 matching results are available.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SearchAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Provides a simple, relevance-based search interface to public user accounts on Twitter as an asynchronous operation.</para>
            <para>Try querying by topical interest, full name, company name, location, or other criteria.</para>
            <para>Exact match searches are not supported.</para>
            <para>Only the first 1,000 matching results are available.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SearchAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Provides a simple, relevance-based search interface to public user accounts on Twitter as an asynchronous operation.</para>
            <para>Try querying by topical interest, full name, company name, location, or other criteria.</para>
            <para>Exact match searches are not supported.</para>
            <para>Only the first 1,000 matching results are available.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the users.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter as an asynchronous operation.</para>
            <para>The author's most recent Tweet will be returned inline when possible.</para>
            <para>GET users/lookup is used to retrieve a bulk collection of user objects.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter as an asynchronous operation.</para>
            <para>The author's most recent Tweet will be returned inline when possible.</para>
            <para>GET users/lookup is used to retrieve a bulk collection of user objects.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ShowAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter as an asynchronous operation.</para>
            <para>The author's most recent Tweet will be returned inline when possible.</para>
            <para>GET users/lookup is used to retrieve a bulk collection of user objects.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestionsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Access to Twitter's suggested user list as an asynchronous operation.</para>
            <para>This returns the list of suggested user categories.</para>
            <para>The category can be used in GET users/suggestions/:slug to get the users in that category.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the categories.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestionsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Access to Twitter's suggested user list as an asynchronous operation.</para>
            <para>This returns the list of suggested user categories.</para>
            <para>The category can be used in GET users/suggestions/:slug to get the users in that category.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the categories.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestionsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Access to Twitter's suggested user list as an asynchronous operation.</para>
            <para>This returns the list of suggested user categories.</para>
            <para>The category can be used in GET users/suggestions/:slug to get the users in that category.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the categories.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestionAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list as an asynchronous operation.</para>
            <para>It is recommended that applications cache this data for no more than one hour.</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the category.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestionAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list as an asynchronous operation.</para>
            <para>It is recommended that applications cache this data for no more than one hour.</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the category.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestionAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list as an asynchronous operation.</para>
            <para>It is recommended that applications cache this data for no more than one hour.</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the category.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestedMembersAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the category.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestedMembersAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the category.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestedMembersAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user as an asynchronous operation.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the category.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpamAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Report the specified user as a spam account to Twitter.</para>
            <para>Additionally performs the equivalent of POST blocks/create on behalf of the authenticated user.</para>
            <para>Note: One of these parameters must be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpamAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Report the specified user as a spam account to Twitter.</para>
            <para>Additionally performs the equivalent of POST blocks/create on behalf of the authenticated user.</para>
            <para>Note: One of these parameters must be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpam``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Report the specified user as a spam account to Twitter.</para>
            <para>Additionally performs the equivalent of POST blocks/create on behalf of the authenticated user.</para>
            <para>Note: One of these parameters must be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the user.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributees(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to.</para>
            <para>Note: A user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributees(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to.</para>
            <para>Note: A user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributees``1(``0)">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to.</para>
            <para>Note: A user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributors(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account.</para>
            <para>Note: A user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributors(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account.</para>
            <para>Note: A user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributors``1(``0)">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account.</para>
            <para>Note: A user_id or screen_name is required.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Lookup(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
            <para>This method is especially useful when used in conjunction with collections of user IDs returned from GET friends/ids and GET followers/ids.</para>
            <para>GET users/show is used to retrieve a single user object.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;long&gt;</c> user_id (optional)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;string&gt;</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Lookup(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
            <para>This method is especially useful when used in conjunction with collections of user IDs returned from GET friends/ids and GET followers/ids.</para>
            <para>GET users/show is used to retrieve a single user object.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;long&gt;</c> user_id (optional)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;string&gt;</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Lookup``1(``0)">
            <summary>
            <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
            <para>This method is especially useful when used in conjunction with collections of user IDs returned from GET friends/ids and GET followers/ids.</para>
            <para>GET users/show is used to retrieve a single user object.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;long&gt;</c> user_id (optional)</para>
            <para>- <c>string</c> / <c>IEnumerable&lt;string&gt;</c> screen_name (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ProfileBanner(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the size of the specified user's profile banner.</para>
            <para>If the user has not uploaded a profile banner, a HTTP 404 will be served instead.</para>
            <para>This method can be used instead of string manipulation on the profile_banner_url returned in user objects as described in User Profile Images and Banners.</para>
            <para>Note: Always specify either an user_id or screen_name when requesting this method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sizes.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ProfileBanner(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the size of the specified user's profile banner.</para>
            <para>If the user has not uploaded a profile banner, a HTTP 404 will be served instead.</para>
            <para>This method can be used instead of string manipulation on the profile_banner_url returned in user objects as described in User Profile Images and Banners.</para>
            <para>Note: Always specify either an user_id or screen_name when requesting this method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sizes.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ProfileBanner``1(``0)">
            <summary>
            <para>Returns the size of the specified user's profile banner.</para>
            <para>If the user has not uploaded a profile banner, a HTTP 404 will be served instead.</para>
            <para>This method can be used instead of string manipulation on the profile_banner_url returned in user objects as described in User Profile Images and Banners.</para>
            <para>Note: Always specify either an user_id or screen_name when requesting this method.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sizes.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Search(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Provides a simple, relevance-based search interface to public user accounts on Twitter.</para>
            <para>Try querying by topical interest, full name, company name, location, or other criteria.</para>
            <para>Exact match searches are not supported.</para>
            <para>Only the first 1,000 matching results are available.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Search(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Provides a simple, relevance-based search interface to public user accounts on Twitter.</para>
            <para>Try querying by topical interest, full name, company name, location, or other criteria.</para>
            <para>Exact match searches are not supported.</para>
            <para>Only the first 1,000 matching results are available.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Search``1(``0)">
            <summary>
            <para>Provides a simple, relevance-based search interface to public user accounts on Twitter.</para>
            <para>Try querying by topical interest, full name, company name, location, or other criteria.</para>
            <para>Exact match searches are not supported.</para>
            <para>Only the first 1,000 matching results are available.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
            <para>The author's most recent Tweet will be returned inline when possible.</para>
            <para>GET users/lookup is used to retrieve a bulk collection of user objects.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
            <para>The author's most recent Tweet will be returned inline when possible.</para>
            <para>GET users/lookup is used to retrieve a bulk collection of user objects.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Show``1(``0)">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
            <para>The author's most recent Tweet will be returned inline when possible.</para>
            <para>GET users/lookup is used to retrieve a bulk collection of user objects.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>long</c> user_id (required)</para>
            <para>- <c>string</c> screen_name (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Suggestions(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Access to Twitter's suggested user list.</para>
            <para>This returns the list of suggested user categories.</para>
            <para>The category can be used in GET users/suggestions/:slug to get the users in that category.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The catgories.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Suggestions(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Access to Twitter's suggested user list.</para>
            <para>This returns the list of suggested user categories.</para>
            <para>The category can be used in GET users/suggestions/:slug to get the users in that category.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The catgories.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Suggestions``1(``0)">
            <summary>
            <para>Access to Twitter's suggested user list.</para>
            <para>This returns the list of suggested user categories.</para>
            <para>The category can be used in GET users/suggestions/:slug to get the users in that category.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The catgories.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Suggestion(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>It is recommended that applications cache this data for no more than one hour.</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The category.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Suggestion(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>It is recommended that applications cache this data for no more than one hour.</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The category.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Suggestion``1(``0)">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>It is recommended that applications cache this data for no more than one hour.</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The category.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestedMembers(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestedMembers(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestedMembers``1(``0)">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpam(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Report the specified user as a spam account to Twitter.</para>
            <para>Additionally performs the equivalent of POST blocks/create on behalf of the authenticated user.</para>
            <para>Note: One of these parameters must be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpam(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Report the specified user as a spam account to Twitter.</para>
            <para>Additionally performs the equivalent of POST blocks/create on behalf of the authenticated user.</para>
            <para>Note: One of these parameters must be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpam``1(``0)">
            <summary>
            <para>Report the specified user as a spam account to Twitter.</para>
            <para>Additionally performs the equivalent of POST blocks/create on behalf of the authenticated user.</para>
            <para>Note: One of these parameters must be provided.</para>
            <para>Avaliable parameters:</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> user_id (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.DisconnectCode">
            <summary>
            Provides disconnect codes in Twitter Streaming API.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.Shutdown">
            <summary>
            The feed was shutdown (possibly a machine restart)
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.DuplicateStream">
            <summary>
            The same endpoint was connected too many times.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.ControlRequest">
            <summary>
            Control streams was used to close a stream (applies to sitestreams).
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.Stall">
            <summary>
            The client was reading too slowly and was disconnected by the server.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.Normal">
            <summary>
            The client appeared to have initiated a disconnect.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.TokenRevoked">
            <summary>
            An oauth token was revoked for a user (applies to site and userstreams).
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.AdminLogout">
            <summary>
            The same credentials were used to connect a new stream and the oldest was disconnected.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.Reserved">
            <summary>
            <para>Reserved for internal use.</para>
            <para>Will not be delivered to external clients.</para>
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.MaxMessageLimit">
            <summary>
            The stream connected with a negative count parameter and was disconnected after all backfill was delivered.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.StreamException">
            <summary>
            An internal issue disconnected the stream.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.BrokerStall">
            <summary>
            An internal issue disconnected the stream.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.ShedLoad">
            <summary>
            <para>The host the stream was connected to became overloaded and streams were disconnected to balance load.</para>
            <para>Reconnect as usual.</para>
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.EventCode">
            <summary>
            Provides event codes in Twitter Streaming API.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.Block">
            <summary>
            The user blocks a user.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.Unblock">
            <summary>
            The user unblocks a user.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.Favorite">
            <summary>
            The user favorites a Tweet.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.Unfavorite">
            <summary>
            The user unfavorites a Tweet.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.Follow">
            <summary>
            The user follows a user.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.Unfollow">
            <summary>
            The user unfollows a user.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.ListCreated">
            <summary>
            The user creates a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.ListDestroyed">
            <summary>
            The user destroys a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.ListUpdated">
            <summary>
            The user updates a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.ListMemberAdded">
            <summary>
            The user adds a user to a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.ListMemberRemoved">
            <summary>
            The user removes a user from a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.ListUserSubscribed">
            <summary>
            The user subscribes a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.ListUserUnsubscribed">
            <summary>
            The user unsubscribes a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.UserUpdate">
            <summary>
            The user updates a List.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.MessageType">
            <summary>
            Provides message types in Twitter Streaming API.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.DeleteStatus">
            <summary>
            The message indicates the Tweet has been deleted.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.DeleteDirectMessage">
            <summary>
            The message indicates the Direct Message has been deleted.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.ScrubGeo">
            <summary>
            The message indicates that geolocated data must be stripped from a range of Tweets.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.StatusWithheld">
            <summary>
            The message indicates that the indicated tweet has had their content withheld.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.UserWithheld">
            <summary>
            The message indicates that indicated user has had their content withheld.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.Disconnect">
            <summary>
            The message indicates that the streams may be shut down for a variety of reasons. 
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.Warning">
            <summary>
            <para>The message indicates the current health of the connection.</para>
            <para>This can be only sent when connected to a stream using the stall_warnings parameter.</para>
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.Event">
            <summary>
            The message is about non-Tweet events.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.Envelopes">
            <summary>
            <para>The message is sent to identify the target of each message.</para>
            <para>In Site Streams, an additional wrapper is placed around every message, except for blank keep-alive lines.</para>
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.Create">
            <summary>
            The message is a new Tweet.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.DirectMesssage">
            <summary>
            The message is a new Direct Message.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.Friends">
            <summary>
            <para>The message is a list of the user’s friends.</para>
            <para>Twitter sends a preamble before starting regular message delivery upon establishing a User Stream connection.</para>
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.Limit">
            <summary>
            The message indicates that a filtered stream has matched more Tweets than its current rate limit allows to be delivered.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.Control">
            <summary>
            The message is sent to modify the Site Streams connection without reconnecting.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.RawJson">
            <summary>
            The message is in raw JSON format.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.StreamingMessage">
            <summary>
            Represents a streaming message. This class is an abstract class.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.StreamingMessage.Type">
            <summary>
            Gets the type of the message.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.StatusMessage">
            <summary>
            Represents a status message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.StatusMessage.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.DirectMessageMessage">
            <summary>
            Represents a Direct message message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.DirectMessageMessage.DirectMessage">
            <summary>
            The direct message.
            </summary>
            <value>The direct message.</value>
        </member>
        <member name="T:CoreTweet.Streaming.FriendsMessage">
            <summary>
            Represents a message contains ids of friends.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.FriendsMessage.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:CoreTweet.Streaming.FriendsMessage.Friends">
            <summary>
            Gets or sets the ids of friends.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.LimitMessage">
            <summary>
            Represents the message with the rate limit.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.LimitMessage.Track">
            <summary>
            Gets or sets a total count of the number of undelivered Tweets since the connection was opened.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.IdMessage">
            <summary>
            Represents a message contains ids.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.IdMessage.Id">
            <summary>
            Gets or sets the ID.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.IdMessage.UserId">
            <summary>
            Gets or sets the ID of the user.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.IdMessage.UpToStatusId">
            <summary>
            Gets or sets the ID of the status.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.IdMessage.WithheldInCountries">
            <summary>
            Gets or sets the withhelds in countries.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.DisconnectMessage">
            <summary>
            Represents the message published when Twitter disconnects the stream.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.DisconnectMessage.Code">
            <summary>
            Gets or sets the disconnect code.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.DisconnectMessage.StreamName">
            <summary>
            Gets or sets the stream name of current stream.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.DisconnectMessage.Reason">
            <summary>
            Gets or sets the human readable message of the reason.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.WarningMessage">
            <summary>
            Represents a warning message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.WarningMessage.Code">
            <summary>
            Gets or sets the warning code.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.WarningMessage.Message">
            <summary>
            Gets or sets the warning message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.WarningMessage.PercentFull">
            <summary>
            Gets or sets the percentage of the stall messages
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.WarningMessage.UserId">
            <summary>
            Gets or sets the target user ID.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.EventTargetType">
            <summary>
            Provides the event target type.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventTargetType.List">
            <summary>
            The event is about a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventTargetType.Status">
            <summary>
            The event is about a Tweet.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventTargetType.Null">
            <summary>
            The event is unknown.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.EventMessage">
            <summary>
            Represents an event message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.Target">
            <summary>
            Gets or sets the target user.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.Source">
            <summary>
            Gets or sets the source.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.Event">
            <summary>
            Gets or sets the event code.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.TargetType">
            <summary>
            Gets or sets the type of target.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.TargetStatus">
            <summary>
            Gets or sets the target status.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.TargetList">
            <summary>
            Gets or sets the target List.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.CreatedAt">
            <summary>
            Gets or sets the time when the event happened.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.EnvelopesMessage">
            <summary>
            Provides an envelopes message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EnvelopesMessage.ForUser">
            <summary>
            Gets or sets the ID of the user.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EnvelopesMessage.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.ControlMessage">
            <summary>
            Represents a control message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.ControlMessage.ControlUri">
            <summary>
            Gets or sets the URI.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.RawJsonMessage">
            <summary>
            Represents a raw JSON message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.RawJsonMessage.Json">
            <summary>
            Gets or sets the raw JSON.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.StreamingType">
            <summary>
            Provides the types of the Twitter Streaming API.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.StreamingType.User">
            <summary>
            The user stream.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.StreamingType.Site">
            <summary>
            The site stream.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.StreamingType.Filter">
            <summary>
            The filter stream.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.StreamingType.Sample">
            <summary>
            The sample stream.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.StreamingType.Firehose">
            <summary>
            The firehose stream.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.StreamingApi">
            <summary>
            Represents the wrapper for the Twitter Streaming API.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.#ctor(CoreTweet.Core.TokensBase)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Streaming.StreamingApi"/> class with a specified token.
            </summary>
            <param name="tokens"></param>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.StartStream(CoreTweet.Streaming.StreamingType,CoreTweet.Streaming.StreamingParameters)">
            <summary>
            Starts the Twitter stream.
            </summary>
            <param name="type">Type of streaming.</param>
            <param name="parameters">The parameters of streaming.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.StreamingParameters">
            <summary>
            Represents the parameters for the Twitter Streaming API.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingParameters.#ctor(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:CoreTweet.Streaming.StreamingParameters"/> class with a specified option.</para>
            <para>Avaliable parameters: </para>
            <para>*Note: In filter stream, at least one predicate parameter (follow, locations, or track) must be specified.</para>
            <para><c>bool</c> stall_warnings (optional)"/&gt; : Specifies whether stall warnings should be delivered.</para>
            <para><c>string / IEnumerable&lt;string&gt;</c> follow (optional*, required in site stream, ignored in user stream)</para>
            <para><c>string / IEnumerable&lt;string&gt;</c> track (optional*)</para>
            <para><c>string / IEnumerable&lt;string&gt;</c> location (optional*)</para>
            <para><c>string</c> with (optional)</para>
            </summary>
            <param name="streamingParameters">The streaming parameters.</param>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingParameters.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Streaming.StreamingParameters"/> class with a specified option.
            </summary>
            <param name="streamingParameters">The streaming parameters.</param>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingParameters.Create``1(``0)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Streaming.StreamingParameters"/> class with a specified option.
            </summary>
            <param name="streamingParameters">The streaming parameters.</param>
        </member>
        <member name="P:CoreTweet.Streaming.StreamingParameters.Parameters">
            <summary>
            Gets the raw parameters.
            </summary>
        </member>
        <member name="T:CoreTweet.Property">
            <summary>
            Properties of CoreTweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Property.ApiVersion">
            <summary>
            <para>Gets or sets the version of the Twitter API.</para>
            <para>To change this value is not recommended but allowed.</para>
            </summary>
        </member>
    </members>
</doc>
